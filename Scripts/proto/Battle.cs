// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Battle.proto</summary>
public static partial class BattleReflection {

  #region Descriptor
  /// <summary>File descriptor for Battle.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BattleReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxCYXR0bGUucHJvdG8i5QEKCEhlcm9EYXRhEgwKBGd1aWQYASABKAkSDwoH",
          "aGVyb19pZBgCIAEoBRINCgVsZXZlbBgDIAEoBRIOCgZjdXJfaHAYBCABKAUS",
          "DgoGY3VyX21wGAUgASgFEg0KBXBvc194GAYgASgCEg0KBXBvc195GAcgASgC",
          "Eg0KBXBvc196GAggASgCEg0KBXN0YXRlGAkgASgFEhMKC3NraWxsX3BvaW50",
          "GAogASgFEgwKBGdvbGQYCyABKAUSDAoEdGVhbRgMIAEoBRIOCgZtYXhfaHAY",
          "DSABKAUSDgoGbWF4X21wGA4gASgFIiwKC1N0YXJ0QmF0dGxlEh0KCmhlcm9f",
          "ZGF0YXMYASADKAsyCS5IZXJvRGF0YSLUAQoMU3luY0hlcm9EYXRhEhsKBHR5",
          "cGUYASABKA4yDS5TeW5jSGVyb1R5cGUSCQoBeBgCIAEoAhIJCgF5GAMgASgC",
          "EgkKAXoYBCABKAISDwoHcXVhdGVfeBgFIAEoAhIPCgdxdWF0ZV95GAYgASgC",
          "Eg8KB3F1YXRlX3oYByABKAISDwoHcXVhdGVfdxgIIAEoAhITCgtzdGF0ZV90",
          "cmFucxgJIAEoBRINCgVzdGF0ZRgKIAEoBRIOCgZjdXJfaHAYCyABKAUSDgoG",
          "bWF4X2hwGAwgASgFIkYKD1N5bmNOZXRIZXJvRGF0YRIMCgRndWlkGAEgASgJ",
          "EiUKDnN5bmNfaGVyb19kYXRhGAIgASgLMg0uU3luY0hlcm9EYXRhIh0KC1Jz",
          "cFN5bmNIZXJvEg4KBnN0YXR1cxgBIAEoCCLaAQoOUmVxTGF1bmNoU2tpbGwS",
          "EQoJaGVyb19ndWlkGAEgASgJEhMKC3RhcmdldF9ndWlkGAIgASgJEhAKCHNr",
          "aWxsX2lkGAMgASgFEhYKDmxhdW5jaF9wb2ludF94GAQgASgCEhYKDmxhdW5j",
          "aF9wb2ludF95GAUgASgCEhYKDmxhdW5jaF9wb2ludF96GAYgASgCEhYKDnRh",
          "cmdldF9wb2ludF94GAcgASgCEhYKDnRhcmdldF9wb2ludF95GAggASgCEhYK",
          "DnRhcmdldF9wb2ludF96GAkgASgCIiAKDlJzcExhdW5jaFNraWxsEg4KBnN0",
          "YXR1cxgBIAEoCCLVAQoJU3luY1NraWxsEhEKCWhlcm9fZ3VpZBgBIAEoCRIT",
          "Cgt0YXJnZXRfZ3VpZBgCIAEoCRIQCghza2lsbF9pZBgDIAEoBRIWCg5sYXVu",
          "Y2hfcG9pbnRfeBgEIAEoAhIWCg5sYXVuY2hfcG9pbnRfeRgFIAEoAhIWCg5s",
          "YXVuY2hfcG9pbnRfehgGIAEoAhIWCg50YXJnZXRfcG9pbnRfeBgHIAEoAhIW",
          "Cg50YXJnZXRfcG9pbnRfeRgIIAEoAhIWCg50YXJnZXRfcG9pbnRfehgJIAEo",
          "AiILCglIZXJvRGVhdGgiDAoKSGVyb1Jldml2ZSIqCgpGbHlUZXh0TXNnEgwK",
          "BGd1aWQYASABKAkSDgoGbnVtYmVyGAIgASgFIioKClBsYXllckluZm8SCgoC",
          "aWQYASABKA0SEAoIYWN0b3JfaWQYAiABKA0iNAoPR2FtZVBsYXllckluZm9z",
          "EiEKDHBsYXllcl9pbmZvcxgBIAMoCzILLlBsYXllckluZm8qQAoMU3luY0hl",
          "cm9UeXBlEhEKDWtTeW5jUG9zaXRpb24QABIOCgprU3luY1N0YXRlEAESDQoJ",
          "a1N5bmNBdHRyEAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SyncHeroType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HeroData), global::HeroData.Parser, new[]{ "Guid", "HeroId", "Level", "CurHp", "CurMp", "PosX", "PosY", "PosZ", "State", "SkillPoint", "Gold", "Team", "MaxHp", "MaxMp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StartBattle), global::StartBattle.Parser, new[]{ "HeroDatas" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncHeroData), global::SyncHeroData.Parser, new[]{ "Type", "X", "Y", "Z", "QuateX", "QuateY", "QuateZ", "QuateW", "StateTrans", "State", "CurHp", "MaxHp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncNetHeroData), global::SyncNetHeroData.Parser, new[]{ "Guid", "SyncHeroData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RspSyncHero), global::RspSyncHero.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqLaunchSkill), global::ReqLaunchSkill.Parser, new[]{ "HeroGuid", "TargetGuid", "SkillId", "LaunchPointX", "LaunchPointY", "LaunchPointZ", "TargetPointX", "TargetPointY", "TargetPointZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RspLaunchSkill), global::RspLaunchSkill.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncSkill), global::SyncSkill.Parser, new[]{ "HeroGuid", "TargetGuid", "SkillId", "LaunchPointX", "LaunchPointY", "LaunchPointZ", "TargetPointX", "TargetPointY", "TargetPointZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeroDeath), global::HeroDeath.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeroRevive), global::HeroRevive.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FlyTextMsg), global::FlyTextMsg.Parser, new[]{ "Guid", "Number" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "Id", "ActorId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GamePlayerInfos), global::GamePlayerInfos.Parser, new[]{ "PlayerInfos" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum SyncHeroType {
  /// <summary>
  /// 坐标同步
  /// </summary>
  [pbr::OriginalName("kSyncPosition")] KSyncPosition = 0,
  /// <summary>
  /// 状态同步
  /// </summary>
  [pbr::OriginalName("kSyncState")] KSyncState = 1,
  /// <summary>
  /// 属性
  /// </summary>
  [pbr::OriginalName("kSyncAttr")] KSyncAttr = 2,
}

#endregion

#region Messages
public sealed partial class HeroData : pb::IMessage<HeroData> {
  private static readonly pb::MessageParser<HeroData> _parser = new pb::MessageParser<HeroData>(() => new HeroData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeroData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroData(HeroData other) : this() {
    guid_ = other.guid_;
    heroId_ = other.heroId_;
    level_ = other.level_;
    curHp_ = other.curHp_;
    curMp_ = other.curMp_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    state_ = other.state_;
    skillPoint_ = other.skillPoint_;
    gold_ = other.gold_;
    team_ = other.team_;
    maxHp_ = other.maxHp_;
    maxMp_ = other.maxMp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroData Clone() {
    return new HeroData(this);
  }

  /// <summary>Field number for the "guid" field.</summary>
  public const int GuidFieldNumber = 1;
  private string guid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guid {
    get { return guid_; }
    set {
      guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hero_id" field.</summary>
  public const int HeroIdFieldNumber = 2;
  private int heroId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeroId {
    get { return heroId_; }
    set {
      heroId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "cur_hp" field.</summary>
  public const int CurHpFieldNumber = 4;
  private int curHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurHp {
    get { return curHp_; }
    set {
      curHp_ = value;
    }
  }

  /// <summary>Field number for the "cur_mp" field.</summary>
  public const int CurMpFieldNumber = 5;
  private int curMp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurMp {
    get { return curMp_; }
    set {
      curMp_ = value;
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 6;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 7;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 8;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 9;
  private int state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "skill_point" field.</summary>
  public const int SkillPointFieldNumber = 10;
  private int skillPoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillPoint {
    get { return skillPoint_; }
    set {
      skillPoint_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 11;
  private int gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 12;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "max_hp" field.</summary>
  public const int MaxHpFieldNumber = 13;
  private int maxHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxHp {
    get { return maxHp_; }
    set {
      maxHp_ = value;
    }
  }

  /// <summary>Field number for the "max_mp" field.</summary>
  public const int MaxMpFieldNumber = 14;
  private int maxMp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxMp {
    get { return maxMp_; }
    set {
      maxMp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeroData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeroData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Guid != other.Guid) return false;
    if (HeroId != other.HeroId) return false;
    if (Level != other.Level) return false;
    if (CurHp != other.CurHp) return false;
    if (CurMp != other.CurMp) return false;
    if (PosX != other.PosX) return false;
    if (PosY != other.PosY) return false;
    if (PosZ != other.PosZ) return false;
    if (State != other.State) return false;
    if (SkillPoint != other.SkillPoint) return false;
    if (Gold != other.Gold) return false;
    if (Team != other.Team) return false;
    if (MaxHp != other.MaxHp) return false;
    if (MaxMp != other.MaxMp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Guid.Length != 0) hash ^= Guid.GetHashCode();
    if (HeroId != 0) hash ^= HeroId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (CurHp != 0) hash ^= CurHp.GetHashCode();
    if (CurMp != 0) hash ^= CurMp.GetHashCode();
    if (PosX != 0F) hash ^= PosX.GetHashCode();
    if (PosY != 0F) hash ^= PosY.GetHashCode();
    if (PosZ != 0F) hash ^= PosZ.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (SkillPoint != 0) hash ^= SkillPoint.GetHashCode();
    if (Gold != 0) hash ^= Gold.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
    if (MaxMp != 0) hash ^= MaxMp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Guid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Guid);
    }
    if (HeroId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(HeroId);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (CurHp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CurHp);
    }
    if (CurMp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CurMp);
    }
    if (PosX != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(PosZ);
    }
    if (State != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(State);
    }
    if (SkillPoint != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(SkillPoint);
    }
    if (Gold != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Gold);
    }
    if (Team != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Team);
    }
    if (MaxHp != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(MaxHp);
    }
    if (MaxMp != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(MaxMp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Guid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
    }
    if (HeroId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (CurHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
    }
    if (CurMp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMp);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (SkillPoint != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillPoint);
    }
    if (Gold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (MaxHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
    }
    if (MaxMp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeroData other) {
    if (other == null) {
      return;
    }
    if (other.Guid.Length != 0) {
      Guid = other.Guid;
    }
    if (other.HeroId != 0) {
      HeroId = other.HeroId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.CurHp != 0) {
      CurHp = other.CurHp;
    }
    if (other.CurMp != 0) {
      CurMp = other.CurMp;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.SkillPoint != 0) {
      SkillPoint = other.SkillPoint;
    }
    if (other.Gold != 0) {
      Gold = other.Gold;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.MaxHp != 0) {
      MaxHp = other.MaxHp;
    }
    if (other.MaxMp != 0) {
      MaxMp = other.MaxMp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Guid = input.ReadString();
          break;
        }
        case 16: {
          HeroId = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          CurHp = input.ReadInt32();
          break;
        }
        case 40: {
          CurMp = input.ReadInt32();
          break;
        }
        case 53: {
          PosX = input.ReadFloat();
          break;
        }
        case 61: {
          PosY = input.ReadFloat();
          break;
        }
        case 69: {
          PosZ = input.ReadFloat();
          break;
        }
        case 72: {
          State = input.ReadInt32();
          break;
        }
        case 80: {
          SkillPoint = input.ReadInt32();
          break;
        }
        case 88: {
          Gold = input.ReadInt32();
          break;
        }
        case 96: {
          Team = input.ReadInt32();
          break;
        }
        case 104: {
          MaxHp = input.ReadInt32();
          break;
        }
        case 112: {
          MaxMp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class StartBattle : pb::IMessage<StartBattle> {
  private static readonly pb::MessageParser<StartBattle> _parser = new pb::MessageParser<StartBattle>(() => new StartBattle());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StartBattle> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartBattle() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartBattle(StartBattle other) : this() {
    heroDatas_ = other.heroDatas_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StartBattle Clone() {
    return new StartBattle(this);
  }

  /// <summary>Field number for the "hero_datas" field.</summary>
  public const int HeroDatasFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HeroData> _repeated_heroDatas_codec
      = pb::FieldCodec.ForMessage(10, global::HeroData.Parser);
  private readonly pbc::RepeatedField<global::HeroData> heroDatas_ = new pbc::RepeatedField<global::HeroData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HeroData> HeroDatas {
    get { return heroDatas_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StartBattle);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StartBattle other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!heroDatas_.Equals(other.heroDatas_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= heroDatas_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    heroDatas_.WriteTo(output, _repeated_heroDatas_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += heroDatas_.CalculateSize(_repeated_heroDatas_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StartBattle other) {
    if (other == null) {
      return;
    }
    heroDatas_.Add(other.heroDatas_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          heroDatas_.AddEntriesFrom(input, _repeated_heroDatas_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SyncHeroData : pb::IMessage<SyncHeroData> {
  private static readonly pb::MessageParser<SyncHeroData> _parser = new pb::MessageParser<SyncHeroData>(() => new SyncHeroData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncHeroData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncHeroData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncHeroData(SyncHeroData other) : this() {
    type_ = other.type_;
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    quateX_ = other.quateX_;
    quateY_ = other.quateY_;
    quateZ_ = other.quateZ_;
    quateW_ = other.quateW_;
    stateTrans_ = other.stateTrans_;
    state_ = other.state_;
    curHp_ = other.curHp_;
    maxHp_ = other.maxHp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncHeroData Clone() {
    return new SyncHeroData(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::SyncHeroType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SyncHeroType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 2;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 3;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 4;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "quate_x" field.</summary>
  public const int QuateXFieldNumber = 5;
  private float quateX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float QuateX {
    get { return quateX_; }
    set {
      quateX_ = value;
    }
  }

  /// <summary>Field number for the "quate_y" field.</summary>
  public const int QuateYFieldNumber = 6;
  private float quateY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float QuateY {
    get { return quateY_; }
    set {
      quateY_ = value;
    }
  }

  /// <summary>Field number for the "quate_z" field.</summary>
  public const int QuateZFieldNumber = 7;
  private float quateZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float QuateZ {
    get { return quateZ_; }
    set {
      quateZ_ = value;
    }
  }

  /// <summary>Field number for the "quate_w" field.</summary>
  public const int QuateWFieldNumber = 8;
  private float quateW_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float QuateW {
    get { return quateW_; }
    set {
      quateW_ = value;
    }
  }

  /// <summary>Field number for the "state_trans" field.</summary>
  public const int StateTransFieldNumber = 9;
  private int stateTrans_;
  /// <summary>
  ///  状态转换,同步给客户端
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StateTrans {
    get { return stateTrans_; }
    set {
      stateTrans_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 10;
  private int state_;
  /// <summary>
  ///  服务器记录英雄状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "cur_hp" field.</summary>
  public const int CurHpFieldNumber = 11;
  private int curHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurHp {
    get { return curHp_; }
    set {
      curHp_ = value;
    }
  }

  /// <summary>Field number for the "max_hp" field.</summary>
  public const int MaxHpFieldNumber = 12;
  private int maxHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxHp {
    get { return maxHp_; }
    set {
      maxHp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncHeroData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncHeroData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (QuateX != other.QuateX) return false;
    if (QuateY != other.QuateY) return false;
    if (QuateZ != other.QuateZ) return false;
    if (QuateW != other.QuateW) return false;
    if (StateTrans != other.StateTrans) return false;
    if (State != other.State) return false;
    if (CurHp != other.CurHp) return false;
    if (MaxHp != other.MaxHp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Z != 0F) hash ^= Z.GetHashCode();
    if (QuateX != 0F) hash ^= QuateX.GetHashCode();
    if (QuateY != 0F) hash ^= QuateY.GetHashCode();
    if (QuateZ != 0F) hash ^= QuateZ.GetHashCode();
    if (QuateW != 0F) hash ^= QuateW.GetHashCode();
    if (StateTrans != 0) hash ^= StateTrans.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (CurHp != 0) hash ^= CurHp.GetHashCode();
    if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (X != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Z);
    }
    if (QuateX != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(QuateX);
    }
    if (QuateY != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(QuateY);
    }
    if (QuateZ != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(QuateZ);
    }
    if (QuateW != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(QuateW);
    }
    if (StateTrans != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(StateTrans);
    }
    if (State != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(State);
    }
    if (CurHp != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(CurHp);
    }
    if (MaxHp != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(MaxHp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (QuateX != 0F) {
      size += 1 + 4;
    }
    if (QuateY != 0F) {
      size += 1 + 4;
    }
    if (QuateZ != 0F) {
      size += 1 + 4;
    }
    if (QuateW != 0F) {
      size += 1 + 4;
    }
    if (StateTrans != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateTrans);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (CurHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
    }
    if (MaxHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncHeroData other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.QuateX != 0F) {
      QuateX = other.QuateX;
    }
    if (other.QuateY != 0F) {
      QuateY = other.QuateY;
    }
    if (other.QuateZ != 0F) {
      QuateZ = other.QuateZ;
    }
    if (other.QuateW != 0F) {
      QuateW = other.QuateW;
    }
    if (other.StateTrans != 0) {
      StateTrans = other.StateTrans;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.CurHp != 0) {
      CurHp = other.CurHp;
    }
    if (other.MaxHp != 0) {
      MaxHp = other.MaxHp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::SyncHeroType) input.ReadEnum();
          break;
        }
        case 21: {
          X = input.ReadFloat();
          break;
        }
        case 29: {
          Y = input.ReadFloat();
          break;
        }
        case 37: {
          Z = input.ReadFloat();
          break;
        }
        case 45: {
          QuateX = input.ReadFloat();
          break;
        }
        case 53: {
          QuateY = input.ReadFloat();
          break;
        }
        case 61: {
          QuateZ = input.ReadFloat();
          break;
        }
        case 69: {
          QuateW = input.ReadFloat();
          break;
        }
        case 72: {
          StateTrans = input.ReadInt32();
          break;
        }
        case 80: {
          State = input.ReadInt32();
          break;
        }
        case 88: {
          CurHp = input.ReadInt32();
          break;
        }
        case 96: {
          MaxHp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SyncNetHeroData : pb::IMessage<SyncNetHeroData> {
  private static readonly pb::MessageParser<SyncNetHeroData> _parser = new pb::MessageParser<SyncNetHeroData>(() => new SyncNetHeroData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncNetHeroData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncNetHeroData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncNetHeroData(SyncNetHeroData other) : this() {
    guid_ = other.guid_;
    SyncHeroData = other.syncHeroData_ != null ? other.SyncHeroData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncNetHeroData Clone() {
    return new SyncNetHeroData(this);
  }

  /// <summary>Field number for the "guid" field.</summary>
  public const int GuidFieldNumber = 1;
  private string guid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guid {
    get { return guid_; }
    set {
      guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sync_hero_data" field.</summary>
  public const int SyncHeroDataFieldNumber = 2;
  private global::SyncHeroData syncHeroData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SyncHeroData SyncHeroData {
    get { return syncHeroData_; }
    set {
      syncHeroData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncNetHeroData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncNetHeroData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Guid != other.Guid) return false;
    if (!object.Equals(SyncHeroData, other.SyncHeroData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Guid.Length != 0) hash ^= Guid.GetHashCode();
    if (syncHeroData_ != null) hash ^= SyncHeroData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Guid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Guid);
    }
    if (syncHeroData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SyncHeroData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Guid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
    }
    if (syncHeroData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncHeroData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncNetHeroData other) {
    if (other == null) {
      return;
    }
    if (other.Guid.Length != 0) {
      Guid = other.Guid;
    }
    if (other.syncHeroData_ != null) {
      if (syncHeroData_ == null) {
        syncHeroData_ = new global::SyncHeroData();
      }
      SyncHeroData.MergeFrom(other.SyncHeroData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Guid = input.ReadString();
          break;
        }
        case 18: {
          if (syncHeroData_ == null) {
            syncHeroData_ = new global::SyncHeroData();
          }
          input.ReadMessage(syncHeroData_);
          break;
        }
      }
    }
  }

}

public sealed partial class RspSyncHero : pb::IMessage<RspSyncHero> {
  private static readonly pb::MessageParser<RspSyncHero> _parser = new pb::MessageParser<RspSyncHero>(() => new RspSyncHero());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RspSyncHero> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RspSyncHero() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RspSyncHero(RspSyncHero other) : this() {
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RspSyncHero Clone() {
    return new RspSyncHero(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private bool status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RspSyncHero);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RspSyncHero other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != false) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != false) {
      output.WriteRawTag(8);
      output.WriteBool(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RspSyncHero other) {
    if (other == null) {
      return;
    }
    if (other.Status != false) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Status = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class ReqLaunchSkill : pb::IMessage<ReqLaunchSkill> {
  private static readonly pb::MessageParser<ReqLaunchSkill> _parser = new pb::MessageParser<ReqLaunchSkill>(() => new ReqLaunchSkill());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqLaunchSkill> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqLaunchSkill() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqLaunchSkill(ReqLaunchSkill other) : this() {
    heroGuid_ = other.heroGuid_;
    targetGuid_ = other.targetGuid_;
    skillId_ = other.skillId_;
    launchPointX_ = other.launchPointX_;
    launchPointY_ = other.launchPointY_;
    launchPointZ_ = other.launchPointZ_;
    targetPointX_ = other.targetPointX_;
    targetPointY_ = other.targetPointY_;
    targetPointZ_ = other.targetPointZ_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqLaunchSkill Clone() {
    return new ReqLaunchSkill(this);
  }

  /// <summary>Field number for the "hero_guid" field.</summary>
  public const int HeroGuidFieldNumber = 1;
  private string heroGuid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeroGuid {
    get { return heroGuid_; }
    set {
      heroGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target_guid" field.</summary>
  public const int TargetGuidFieldNumber = 2;
  private string targetGuid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetGuid {
    get { return targetGuid_; }
    set {
      targetGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "skill_id" field.</summary>
  public const int SkillIdFieldNumber = 3;
  private int skillId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "launch_point_x" field.</summary>
  public const int LaunchPointXFieldNumber = 4;
  private float launchPointX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaunchPointX {
    get { return launchPointX_; }
    set {
      launchPointX_ = value;
    }
  }

  /// <summary>Field number for the "launch_point_y" field.</summary>
  public const int LaunchPointYFieldNumber = 5;
  private float launchPointY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaunchPointY {
    get { return launchPointY_; }
    set {
      launchPointY_ = value;
    }
  }

  /// <summary>Field number for the "launch_point_z" field.</summary>
  public const int LaunchPointZFieldNumber = 6;
  private float launchPointZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaunchPointZ {
    get { return launchPointZ_; }
    set {
      launchPointZ_ = value;
    }
  }

  /// <summary>Field number for the "target_point_x" field.</summary>
  public const int TargetPointXFieldNumber = 7;
  private float targetPointX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TargetPointX {
    get { return targetPointX_; }
    set {
      targetPointX_ = value;
    }
  }

  /// <summary>Field number for the "target_point_y" field.</summary>
  public const int TargetPointYFieldNumber = 8;
  private float targetPointY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TargetPointY {
    get { return targetPointY_; }
    set {
      targetPointY_ = value;
    }
  }

  /// <summary>Field number for the "target_point_z" field.</summary>
  public const int TargetPointZFieldNumber = 9;
  private float targetPointZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TargetPointZ {
    get { return targetPointZ_; }
    set {
      targetPointZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqLaunchSkill);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqLaunchSkill other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HeroGuid != other.HeroGuid) return false;
    if (TargetGuid != other.TargetGuid) return false;
    if (SkillId != other.SkillId) return false;
    if (LaunchPointX != other.LaunchPointX) return false;
    if (LaunchPointY != other.LaunchPointY) return false;
    if (LaunchPointZ != other.LaunchPointZ) return false;
    if (TargetPointX != other.TargetPointX) return false;
    if (TargetPointY != other.TargetPointY) return false;
    if (TargetPointZ != other.TargetPointZ) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HeroGuid.Length != 0) hash ^= HeroGuid.GetHashCode();
    if (TargetGuid.Length != 0) hash ^= TargetGuid.GetHashCode();
    if (SkillId != 0) hash ^= SkillId.GetHashCode();
    if (LaunchPointX != 0F) hash ^= LaunchPointX.GetHashCode();
    if (LaunchPointY != 0F) hash ^= LaunchPointY.GetHashCode();
    if (LaunchPointZ != 0F) hash ^= LaunchPointZ.GetHashCode();
    if (TargetPointX != 0F) hash ^= TargetPointX.GetHashCode();
    if (TargetPointY != 0F) hash ^= TargetPointY.GetHashCode();
    if (TargetPointZ != 0F) hash ^= TargetPointZ.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HeroGuid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HeroGuid);
    }
    if (TargetGuid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TargetGuid);
    }
    if (SkillId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SkillId);
    }
    if (LaunchPointX != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(LaunchPointX);
    }
    if (LaunchPointY != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(LaunchPointY);
    }
    if (LaunchPointZ != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(LaunchPointZ);
    }
    if (TargetPointX != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(TargetPointX);
    }
    if (TargetPointY != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(TargetPointY);
    }
    if (TargetPointZ != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(TargetPointZ);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HeroGuid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroGuid);
    }
    if (TargetGuid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetGuid);
    }
    if (SkillId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
    }
    if (LaunchPointX != 0F) {
      size += 1 + 4;
    }
    if (LaunchPointY != 0F) {
      size += 1 + 4;
    }
    if (LaunchPointZ != 0F) {
      size += 1 + 4;
    }
    if (TargetPointX != 0F) {
      size += 1 + 4;
    }
    if (TargetPointY != 0F) {
      size += 1 + 4;
    }
    if (TargetPointZ != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqLaunchSkill other) {
    if (other == null) {
      return;
    }
    if (other.HeroGuid.Length != 0) {
      HeroGuid = other.HeroGuid;
    }
    if (other.TargetGuid.Length != 0) {
      TargetGuid = other.TargetGuid;
    }
    if (other.SkillId != 0) {
      SkillId = other.SkillId;
    }
    if (other.LaunchPointX != 0F) {
      LaunchPointX = other.LaunchPointX;
    }
    if (other.LaunchPointY != 0F) {
      LaunchPointY = other.LaunchPointY;
    }
    if (other.LaunchPointZ != 0F) {
      LaunchPointZ = other.LaunchPointZ;
    }
    if (other.TargetPointX != 0F) {
      TargetPointX = other.TargetPointX;
    }
    if (other.TargetPointY != 0F) {
      TargetPointY = other.TargetPointY;
    }
    if (other.TargetPointZ != 0F) {
      TargetPointZ = other.TargetPointZ;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HeroGuid = input.ReadString();
          break;
        }
        case 18: {
          TargetGuid = input.ReadString();
          break;
        }
        case 24: {
          SkillId = input.ReadInt32();
          break;
        }
        case 37: {
          LaunchPointX = input.ReadFloat();
          break;
        }
        case 45: {
          LaunchPointY = input.ReadFloat();
          break;
        }
        case 53: {
          LaunchPointZ = input.ReadFloat();
          break;
        }
        case 61: {
          TargetPointX = input.ReadFloat();
          break;
        }
        case 69: {
          TargetPointY = input.ReadFloat();
          break;
        }
        case 77: {
          TargetPointZ = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class RspLaunchSkill : pb::IMessage<RspLaunchSkill> {
  private static readonly pb::MessageParser<RspLaunchSkill> _parser = new pb::MessageParser<RspLaunchSkill>(() => new RspLaunchSkill());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RspLaunchSkill> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RspLaunchSkill() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RspLaunchSkill(RspLaunchSkill other) : this() {
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RspLaunchSkill Clone() {
    return new RspLaunchSkill(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private bool status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RspLaunchSkill);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RspLaunchSkill other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != false) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != false) {
      output.WriteRawTag(8);
      output.WriteBool(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RspLaunchSkill other) {
    if (other == null) {
      return;
    }
    if (other.Status != false) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Status = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 同步技能
/// </summary>
public sealed partial class SyncSkill : pb::IMessage<SyncSkill> {
  private static readonly pb::MessageParser<SyncSkill> _parser = new pb::MessageParser<SyncSkill>(() => new SyncSkill());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncSkill> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncSkill() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncSkill(SyncSkill other) : this() {
    heroGuid_ = other.heroGuid_;
    targetGuid_ = other.targetGuid_;
    skillId_ = other.skillId_;
    launchPointX_ = other.launchPointX_;
    launchPointY_ = other.launchPointY_;
    launchPointZ_ = other.launchPointZ_;
    targetPointX_ = other.targetPointX_;
    targetPointY_ = other.targetPointY_;
    targetPointZ_ = other.targetPointZ_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncSkill Clone() {
    return new SyncSkill(this);
  }

  /// <summary>Field number for the "hero_guid" field.</summary>
  public const int HeroGuidFieldNumber = 1;
  private string heroGuid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HeroGuid {
    get { return heroGuid_; }
    set {
      heroGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target_guid" field.</summary>
  public const int TargetGuidFieldNumber = 2;
  private string targetGuid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetGuid {
    get { return targetGuid_; }
    set {
      targetGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "skill_id" field.</summary>
  public const int SkillIdFieldNumber = 3;
  private int skillId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "launch_point_x" field.</summary>
  public const int LaunchPointXFieldNumber = 4;
  private float launchPointX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaunchPointX {
    get { return launchPointX_; }
    set {
      launchPointX_ = value;
    }
  }

  /// <summary>Field number for the "launch_point_y" field.</summary>
  public const int LaunchPointYFieldNumber = 5;
  private float launchPointY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaunchPointY {
    get { return launchPointY_; }
    set {
      launchPointY_ = value;
    }
  }

  /// <summary>Field number for the "launch_point_z" field.</summary>
  public const int LaunchPointZFieldNumber = 6;
  private float launchPointZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LaunchPointZ {
    get { return launchPointZ_; }
    set {
      launchPointZ_ = value;
    }
  }

  /// <summary>Field number for the "target_point_x" field.</summary>
  public const int TargetPointXFieldNumber = 7;
  private float targetPointX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TargetPointX {
    get { return targetPointX_; }
    set {
      targetPointX_ = value;
    }
  }

  /// <summary>Field number for the "target_point_y" field.</summary>
  public const int TargetPointYFieldNumber = 8;
  private float targetPointY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TargetPointY {
    get { return targetPointY_; }
    set {
      targetPointY_ = value;
    }
  }

  /// <summary>Field number for the "target_point_z" field.</summary>
  public const int TargetPointZFieldNumber = 9;
  private float targetPointZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TargetPointZ {
    get { return targetPointZ_; }
    set {
      targetPointZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncSkill);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncSkill other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HeroGuid != other.HeroGuid) return false;
    if (TargetGuid != other.TargetGuid) return false;
    if (SkillId != other.SkillId) return false;
    if (LaunchPointX != other.LaunchPointX) return false;
    if (LaunchPointY != other.LaunchPointY) return false;
    if (LaunchPointZ != other.LaunchPointZ) return false;
    if (TargetPointX != other.TargetPointX) return false;
    if (TargetPointY != other.TargetPointY) return false;
    if (TargetPointZ != other.TargetPointZ) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HeroGuid.Length != 0) hash ^= HeroGuid.GetHashCode();
    if (TargetGuid.Length != 0) hash ^= TargetGuid.GetHashCode();
    if (SkillId != 0) hash ^= SkillId.GetHashCode();
    if (LaunchPointX != 0F) hash ^= LaunchPointX.GetHashCode();
    if (LaunchPointY != 0F) hash ^= LaunchPointY.GetHashCode();
    if (LaunchPointZ != 0F) hash ^= LaunchPointZ.GetHashCode();
    if (TargetPointX != 0F) hash ^= TargetPointX.GetHashCode();
    if (TargetPointY != 0F) hash ^= TargetPointY.GetHashCode();
    if (TargetPointZ != 0F) hash ^= TargetPointZ.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HeroGuid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HeroGuid);
    }
    if (TargetGuid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TargetGuid);
    }
    if (SkillId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SkillId);
    }
    if (LaunchPointX != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(LaunchPointX);
    }
    if (LaunchPointY != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(LaunchPointY);
    }
    if (LaunchPointZ != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(LaunchPointZ);
    }
    if (TargetPointX != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(TargetPointX);
    }
    if (TargetPointY != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(TargetPointY);
    }
    if (TargetPointZ != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(TargetPointZ);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HeroGuid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroGuid);
    }
    if (TargetGuid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetGuid);
    }
    if (SkillId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
    }
    if (LaunchPointX != 0F) {
      size += 1 + 4;
    }
    if (LaunchPointY != 0F) {
      size += 1 + 4;
    }
    if (LaunchPointZ != 0F) {
      size += 1 + 4;
    }
    if (TargetPointX != 0F) {
      size += 1 + 4;
    }
    if (TargetPointY != 0F) {
      size += 1 + 4;
    }
    if (TargetPointZ != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncSkill other) {
    if (other == null) {
      return;
    }
    if (other.HeroGuid.Length != 0) {
      HeroGuid = other.HeroGuid;
    }
    if (other.TargetGuid.Length != 0) {
      TargetGuid = other.TargetGuid;
    }
    if (other.SkillId != 0) {
      SkillId = other.SkillId;
    }
    if (other.LaunchPointX != 0F) {
      LaunchPointX = other.LaunchPointX;
    }
    if (other.LaunchPointY != 0F) {
      LaunchPointY = other.LaunchPointY;
    }
    if (other.LaunchPointZ != 0F) {
      LaunchPointZ = other.LaunchPointZ;
    }
    if (other.TargetPointX != 0F) {
      TargetPointX = other.TargetPointX;
    }
    if (other.TargetPointY != 0F) {
      TargetPointY = other.TargetPointY;
    }
    if (other.TargetPointZ != 0F) {
      TargetPointZ = other.TargetPointZ;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          HeroGuid = input.ReadString();
          break;
        }
        case 18: {
          TargetGuid = input.ReadString();
          break;
        }
        case 24: {
          SkillId = input.ReadInt32();
          break;
        }
        case 37: {
          LaunchPointX = input.ReadFloat();
          break;
        }
        case 45: {
          LaunchPointY = input.ReadFloat();
          break;
        }
        case 53: {
          LaunchPointZ = input.ReadFloat();
          break;
        }
        case 61: {
          TargetPointX = input.ReadFloat();
          break;
        }
        case 69: {
          TargetPointY = input.ReadFloat();
          break;
        }
        case 77: {
          TargetPointZ = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class HeroDeath : pb::IMessage<HeroDeath> {
  private static readonly pb::MessageParser<HeroDeath> _parser = new pb::MessageParser<HeroDeath>(() => new HeroDeath());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeroDeath> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroDeath() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroDeath(HeroDeath other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroDeath Clone() {
    return new HeroDeath(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeroDeath);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeroDeath other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeroDeath other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class HeroRevive : pb::IMessage<HeroRevive> {
  private static readonly pb::MessageParser<HeroRevive> _parser = new pb::MessageParser<HeroRevive>(() => new HeroRevive());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeroRevive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroRevive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroRevive(HeroRevive other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeroRevive Clone() {
    return new HeroRevive(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeroRevive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeroRevive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeroRevive other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 角色伤害加血飘字
/// </summary>
public sealed partial class FlyTextMsg : pb::IMessage<FlyTextMsg> {
  private static readonly pb::MessageParser<FlyTextMsg> _parser = new pb::MessageParser<FlyTextMsg>(() => new FlyTextMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FlyTextMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FlyTextMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FlyTextMsg(FlyTextMsg other) : this() {
    guid_ = other.guid_;
    number_ = other.number_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FlyTextMsg Clone() {
    return new FlyTextMsg(this);
  }

  /// <summary>Field number for the "guid" field.</summary>
  public const int GuidFieldNumber = 1;
  private string guid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guid {
    get { return guid_; }
    set {
      guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "number" field.</summary>
  public const int NumberFieldNumber = 2;
  private int number_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Number {
    get { return number_; }
    set {
      number_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FlyTextMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FlyTextMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Guid != other.Guid) return false;
    if (Number != other.Number) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Guid.Length != 0) hash ^= Guid.GetHashCode();
    if (Number != 0) hash ^= Number.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Guid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Guid);
    }
    if (Number != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Number);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Guid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
    }
    if (Number != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FlyTextMsg other) {
    if (other == null) {
      return;
    }
    if (other.Guid.Length != 0) {
      Guid = other.Guid;
    }
    if (other.Number != 0) {
      Number = other.Number;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Guid = input.ReadString();
          break;
        }
        case 16: {
          Number = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    id_ = other.id_;
    actorId_ = other.actorId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "actor_id" field.</summary>
  public const int ActorIdFieldNumber = 2;
  private uint actorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ActorId {
    get { return actorId_; }
    set {
      actorId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (ActorId != other.ActorId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (ActorId != 0) hash ^= ActorId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (ActorId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ActorId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (ActorId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActorId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.ActorId != 0) {
      ActorId = other.ActorId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 16: {
          ActorId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GamePlayerInfos : pb::IMessage<GamePlayerInfos> {
  private static readonly pb::MessageParser<GamePlayerInfos> _parser = new pb::MessageParser<GamePlayerInfos>(() => new GamePlayerInfos());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GamePlayerInfos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BattleReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePlayerInfos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePlayerInfos(GamePlayerInfos other) : this() {
    playerInfos_ = other.playerInfos_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GamePlayerInfos Clone() {
    return new GamePlayerInfos(this);
  }

  /// <summary>Field number for the "player_infos" field.</summary>
  public const int PlayerInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_playerInfos_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> PlayerInfos {
    get { return playerInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GamePlayerInfos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GamePlayerInfos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!playerInfos_.Equals(other.playerInfos_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= playerInfos_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GamePlayerInfos other) {
    if (other == null) {
      return;
    }
    playerInfos_.Add(other.playerInfos_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Game.proto</summary>
public static partial class GameReflection {

  #region Descriptor
  /// <summary>File descriptor for Game.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GameReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpHYW1lLnByb3RvIkYKCFVzZXJEYXRhEgwKBGd1aWQYASABKAkSDQoFbGV2",
          "ZWwYAiABKAUSDAoEbmFtZRgDIAEoCRIPCgdjdXJfZXhwGAQgASgFYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UserData), global::UserData.Parser, new[]{ "Guid", "Level", "Name", "CurExp" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///  用户数据
/// </summary>
public sealed partial class UserData : pb::IMessage<UserData> {
  private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData(UserData other) : this() {
    guid_ = other.guid_;
    level_ = other.level_;
    name_ = other.name_;
    curExp_ = other.curExp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserData Clone() {
    return new UserData(this);
  }

  /// <summary>Field number for the "guid" field.</summary>
  public const int GuidFieldNumber = 1;
  private string guid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guid {
    get { return guid_; }
    set {
      guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cur_exp" field.</summary>
  public const int CurExpFieldNumber = 4;
  private int curExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurExp {
    get { return curExp_; }
    set {
      curExp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Guid != other.Guid) return false;
    if (Level != other.Level) return false;
    if (Name != other.Name) return false;
    if (CurExp != other.CurExp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Guid.Length != 0) hash ^= Guid.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (CurExp != 0) hash ^= CurExp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Guid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Guid);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (CurExp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CurExp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Guid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (CurExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurExp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserData other) {
    if (other == null) {
      return;
    }
    if (other.Guid.Length != 0) {
      Guid = other.Guid;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.CurExp != 0) {
      CurExp = other.CurExp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Guid = input.ReadString();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          CurExp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerInfos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Battle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Battle_2eproto() {
  protobuf_AddDesc_Battle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Battle.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, actor_id_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _is_default_instance_));
  GamePlayerInfos_descriptor_ = file->message_type(1);
  static const int GamePlayerInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerInfos, player_infos_),
  };
  GamePlayerInfos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GamePlayerInfos_descriptor_,
      GamePlayerInfos::default_instance_,
      GamePlayerInfos_offsets_,
      -1,
      -1,
      -1,
      sizeof(GamePlayerInfos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerInfos, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerInfos, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GamePlayerInfos_descriptor_, &GamePlayerInfos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Battle_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete GamePlayerInfos::default_instance_;
  delete GamePlayerInfos_reflection_;
}

void protobuf_AddDesc_Battle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Battle.proto\"*\n\nPlayerInfo\022\n\n\002id\030\001 \001(\r"
    "\022\020\n\010actor_id\030\002 \001(\r\"4\n\017GamePlayerInfos\022!\n"
    "\014player_infos\030\001 \003(\0132\013.PlayerInfob\006proto3", 120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Battle.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  GamePlayerInfos::default_instance_ = new GamePlayerInfos();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  GamePlayerInfos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Battle_2eproto {
  StaticDescriptorInitializer_Battle_2eproto() {
    protobuf_AddDesc_Battle_2eproto();
  }
} static_descriptor_initializer_Battle_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kIdFieldNumber;
const int PlayerInfo::kActorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfo)
}

void PlayerInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  actor_id_ = 0u;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, actor_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_id;
        break;
      }

      // optional uint32 actor_id = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 actor_id = 2;
  if (this->actor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 actor_id = 2;
  if (this->actor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actor_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfo)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 actor_id = 2;
  if (this->actor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.actor_id() != 0) {
    set_actor_id(from.actor_id());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  std::swap(id_, other->id_);
  std::swap(actor_id_, other->actor_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional uint32 id = 1;
void PlayerInfo::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.id)
  return id_;
}
 void PlayerInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfo.id)
}

// optional uint32 actor_id = 2;
void PlayerInfo::clear_actor_id() {
  actor_id_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::actor_id() const {
  // @@protoc_insertion_point(field_get:PlayerInfo.actor_id)
  return actor_id_;
}
 void PlayerInfo::set_actor_id(::google::protobuf::uint32 value) {
  
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfo.actor_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayerInfos::kPlayerInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayerInfos::GamePlayerInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePlayerInfos)
}

void GamePlayerInfos::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GamePlayerInfos::GamePlayerInfos(const GamePlayerInfos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GamePlayerInfos)
}

void GamePlayerInfos::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GamePlayerInfos::~GamePlayerInfos() {
  // @@protoc_insertion_point(destructor:GamePlayerInfos)
  SharedDtor();
}

void GamePlayerInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerInfos_descriptor_;
}

const GamePlayerInfos& GamePlayerInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GamePlayerInfos* GamePlayerInfos::default_instance_ = NULL;

GamePlayerInfos* GamePlayerInfos::New(::google::protobuf::Arena* arena) const {
  GamePlayerInfos* n = new GamePlayerInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePlayerInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerInfos)
  player_infos_.Clear();
}

bool GamePlayerInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GamePlayerInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo player_infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_player_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePlayerInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePlayerInfos)
  return false;
#undef DO_
}

void GamePlayerInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePlayerInfos)
  // repeated .PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GamePlayerInfos)
}

::google::protobuf::uint8* GamePlayerInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GamePlayerInfos)
  // repeated .PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player_infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GamePlayerInfos)
  return target;
}

int GamePlayerInfos::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerInfos)
  int total_size = 0;

  // repeated .PlayerInfo player_infos = 1;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GamePlayerInfos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GamePlayerInfos* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GamePlayerInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GamePlayerInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GamePlayerInfos)
    MergeFrom(*source);
  }
}

void GamePlayerInfos::MergeFrom(const GamePlayerInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerInfos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  player_infos_.MergeFrom(from.player_infos_);
}

void GamePlayerInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GamePlayerInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerInfos::CopyFrom(const GamePlayerInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerInfos::IsInitialized() const {

  return true;
}

void GamePlayerInfos::Swap(GamePlayerInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayerInfos::InternalSwap(GamePlayerInfos* other) {
  player_infos_.UnsafeArenaSwap(&other->player_infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GamePlayerInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerInfos_descriptor_;
  metadata.reflection = GamePlayerInfos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePlayerInfos

// repeated .PlayerInfo player_infos = 1;
int GamePlayerInfos::player_infos_size() const {
  return player_infos_.size();
}
void GamePlayerInfos::clear_player_infos() {
  player_infos_.Clear();
}
const ::PlayerInfo& GamePlayerInfos::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:GamePlayerInfos.player_infos)
  return player_infos_.Get(index);
}
::PlayerInfo* GamePlayerInfos::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:GamePlayerInfos.player_infos)
  return player_infos_.Mutable(index);
}
::PlayerInfo* GamePlayerInfos::add_player_infos() {
  // @@protoc_insertion_point(field_add:GamePlayerInfos.player_infos)
  return player_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
GamePlayerInfos::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:GamePlayerInfos.player_infos)
  return &player_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
GamePlayerInfos::player_infos() const {
  // @@protoc_insertion_point(field_list:GamePlayerInfos.player_infos)
  return player_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameCommond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameCommond_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameCommondGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameCommondGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameCommondGroup_CommondsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Battle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Battle_2eproto() {
  protobuf_AddDesc_Battle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Battle.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, actor_asset_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _is_default_instance_));
  GamePlayerInfos_descriptor_ = file->message_type(1);
  static const int GamePlayerInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerInfos, player_infos_),
  };
  GamePlayerInfos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GamePlayerInfos_descriptor_,
      GamePlayerInfos::default_instance_,
      GamePlayerInfos_offsets_,
      -1,
      -1,
      -1,
      sizeof(GamePlayerInfos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerInfos, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerInfos, _is_default_instance_));
  StartBattleInfo_descriptor_ = file->message_type(2);
  static const int StartBattleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBattleInfo, my_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBattleInfo, player_infos_),
  };
  StartBattleInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartBattleInfo_descriptor_,
      StartBattleInfo::default_instance_,
      StartBattleInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartBattleInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBattleInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBattleInfo, _is_default_instance_));
  GameCommond_descriptor_ = file->message_type(3);
  static const int GameCommond_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommond, x_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommond, y_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommond, jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommond, skill_),
  };
  GameCommond_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameCommond_descriptor_,
      GameCommond::default_instance_,
      GameCommond_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameCommond),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommond, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommond, _is_default_instance_));
  GameCommondGroup_descriptor_ = file->message_type(4);
  static const int GameCommondGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommondGroup, commonds_),
  };
  GameCommondGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameCommondGroup_descriptor_,
      GameCommondGroup::default_instance_,
      GameCommondGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameCommondGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommondGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCommondGroup, _is_default_instance_));
  GameCommondGroup_CommondsEntry_descriptor_ = GameCommondGroup_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GamePlayerInfos_descriptor_, &GamePlayerInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartBattleInfo_descriptor_, &StartBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameCommond_descriptor_, &GameCommond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameCommondGroup_descriptor_, &GameCommondGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GameCommondGroup_CommondsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::Proto::GameCommond,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GameCommondGroup_CommondsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_Battle_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete GamePlayerInfos::default_instance_;
  delete GamePlayerInfos_reflection_;
  delete StartBattleInfo::default_instance_;
  delete StartBattleInfo_reflection_;
  delete GameCommond::default_instance_;
  delete GameCommond_reflection_;
  delete GameCommondGroup::default_instance_;
  delete GameCommondGroup_reflection_;
}

void protobuf_AddDesc_Battle_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Battle.proto\022\005Proto\"-\n\nPlayerInfo\022\n\n\002i"
    "d\030\001 \001(\r\022\023\n\013actor_asset\030\002 \001(\t\":\n\017GamePlay"
    "erInfos\022\'\n\014player_infos\030\001 \003(\0132\021.Proto.Pl"
    "ayerInfo\"N\n\017StartBattleInfo\022\r\n\005my_id\030\001 \001"
    "(\r\022,\n\014player_infos\030\002 \001(\0132\026.Proto.GamePla"
    "yerInfos\"J\n\013GameCommond\022\016\n\006x_axis\030\001 \001(\002\022"
    "\016\n\006y_axis\030\002 \001(\002\022\014\n\004jump\030\003 \001(\010\022\r\n\005skill\030\004"
    " \001(\005\"\220\001\n\020GameCommondGroup\0227\n\010commonds\030\001 "
    "\003(\0132%.Proto.GameCommondGroup.CommondsEnt"
    "ry\032C\n\rCommondsEntry\022\013\n\003key\030\001 \001(\r\022!\n\005valu"
    "e\030\002 \001(\0132\022.Proto.GameCommond:\0028\001b\006proto3", 439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Battle.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  GamePlayerInfos::default_instance_ = new GamePlayerInfos();
  StartBattleInfo::default_instance_ = new StartBattleInfo();
  GameCommond::default_instance_ = new GameCommond();
  GameCommondGroup::default_instance_ = new GameCommondGroup();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  GamePlayerInfos::default_instance_->InitAsDefaultInstance();
  StartBattleInfo::default_instance_->InitAsDefaultInstance();
  GameCommond::default_instance_->InitAsDefaultInstance();
  GameCommondGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Battle_2eproto {
  StaticDescriptorInitializer_Battle_2eproto() {
    protobuf_AddDesc_Battle_2eproto();
  }
} static_descriptor_initializer_Battle_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kIdFieldNumber;
const int PlayerInfo::kActorAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  actor_asset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Proto.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  actor_asset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.PlayerInfo)
  id_ = 0u;
  actor_asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_actor_asset;
        break;
      }

      // optional string actor_asset = 2;
      case 2: {
        if (tag == 18) {
         parse_actor_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actor_asset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actor_asset().data(), this->actor_asset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Proto.PlayerInfo.actor_asset"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.PlayerInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string actor_asset = 2;
  if (this->actor_asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actor_asset().data(), this->actor_asset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerInfo.actor_asset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->actor_asset(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.PlayerInfo)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string actor_asset = 2;
  if (this->actor_asset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actor_asset().data(), this->actor_asset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Proto.PlayerInfo.actor_asset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->actor_asset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.PlayerInfo)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional string actor_asset = 2;
  if (this->actor_asset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actor_asset());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.actor_asset().size() > 0) {

    actor_asset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actor_asset_);
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  std::swap(id_, other->id_);
  actor_asset_.Swap(&other->actor_asset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional uint32 id = 1;
void PlayerInfo::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerInfo.id)
  return id_;
}
 void PlayerInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto.PlayerInfo.id)
}

// optional string actor_asset = 2;
void PlayerInfo::clear_actor_asset() {
  actor_asset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerInfo::actor_asset() const {
  // @@protoc_insertion_point(field_get:Proto.PlayerInfo.actor_asset)
  return actor_asset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_actor_asset(const ::std::string& value) {
  
  actor_asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.PlayerInfo.actor_asset)
}
 void PlayerInfo::set_actor_asset(const char* value) {
  
  actor_asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.PlayerInfo.actor_asset)
}
 void PlayerInfo::set_actor_asset(const char* value, size_t size) {
  
  actor_asset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.PlayerInfo.actor_asset)
}
 ::std::string* PlayerInfo::mutable_actor_asset() {
  
  // @@protoc_insertion_point(field_mutable:Proto.PlayerInfo.actor_asset)
  return actor_asset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerInfo::release_actor_asset() {
  // @@protoc_insertion_point(field_release:Proto.PlayerInfo.actor_asset)
  
  return actor_asset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerInfo::set_allocated_actor_asset(::std::string* actor_asset) {
  if (actor_asset != NULL) {
    
  } else {
    
  }
  actor_asset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_asset);
  // @@protoc_insertion_point(field_set_allocated:Proto.PlayerInfo.actor_asset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayerInfos::kPlayerInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayerInfos::GamePlayerInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GamePlayerInfos)
}

void GamePlayerInfos::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GamePlayerInfos::GamePlayerInfos(const GamePlayerInfos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.GamePlayerInfos)
}

void GamePlayerInfos::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GamePlayerInfos::~GamePlayerInfos() {
  // @@protoc_insertion_point(destructor:Proto.GamePlayerInfos)
  SharedDtor();
}

void GamePlayerInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerInfos_descriptor_;
}

const GamePlayerInfos& GamePlayerInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GamePlayerInfos* GamePlayerInfos::default_instance_ = NULL;

GamePlayerInfos* GamePlayerInfos::New(::google::protobuf::Arena* arena) const {
  GamePlayerInfos* n = new GamePlayerInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GamePlayerInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GamePlayerInfos)
  player_infos_.Clear();
}

bool GamePlayerInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GamePlayerInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.PlayerInfo player_infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_player_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GamePlayerInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GamePlayerInfos)
  return false;
#undef DO_
}

void GamePlayerInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GamePlayerInfos)
  // repeated .Proto.PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.GamePlayerInfos)
}

::google::protobuf::uint8* GamePlayerInfos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GamePlayerInfos)
  // repeated .Proto.PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player_infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.GamePlayerInfos)
  return target;
}

int GamePlayerInfos::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GamePlayerInfos)
  int total_size = 0;

  // repeated .Proto.PlayerInfo player_infos = 1;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerInfos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GamePlayerInfos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GamePlayerInfos* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GamePlayerInfos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GamePlayerInfos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GamePlayerInfos)
    MergeFrom(*source);
  }
}

void GamePlayerInfos::MergeFrom(const GamePlayerInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GamePlayerInfos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  player_infos_.MergeFrom(from.player_infos_);
}

void GamePlayerInfos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GamePlayerInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerInfos::CopyFrom(const GamePlayerInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GamePlayerInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerInfos::IsInitialized() const {

  return true;
}

void GamePlayerInfos::Swap(GamePlayerInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayerInfos::InternalSwap(GamePlayerInfos* other) {
  player_infos_.UnsafeArenaSwap(&other->player_infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GamePlayerInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerInfos_descriptor_;
  metadata.reflection = GamePlayerInfos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GamePlayerInfos

// repeated .Proto.PlayerInfo player_infos = 1;
int GamePlayerInfos::player_infos_size() const {
  return player_infos_.size();
}
void GamePlayerInfos::clear_player_infos() {
  player_infos_.Clear();
}
const ::Proto::PlayerInfo& GamePlayerInfos::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:Proto.GamePlayerInfos.player_infos)
  return player_infos_.Get(index);
}
::Proto::PlayerInfo* GamePlayerInfos::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.GamePlayerInfos.player_infos)
  return player_infos_.Mutable(index);
}
::Proto::PlayerInfo* GamePlayerInfos::add_player_infos() {
  // @@protoc_insertion_point(field_add:Proto.GamePlayerInfos.player_infos)
  return player_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::Proto::PlayerInfo >*
GamePlayerInfos::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:Proto.GamePlayerInfos.player_infos)
  return &player_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::Proto::PlayerInfo >&
GamePlayerInfos::player_infos() const {
  // @@protoc_insertion_point(field_list:Proto.GamePlayerInfos.player_infos)
  return player_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartBattleInfo::kMyIdFieldNumber;
const int StartBattleInfo::kPlayerInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartBattleInfo::StartBattleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.StartBattleInfo)
}

void StartBattleInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  player_infos_ = const_cast< ::Proto::GamePlayerInfos*>(&::Proto::GamePlayerInfos::default_instance());
}

StartBattleInfo::StartBattleInfo(const StartBattleInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.StartBattleInfo)
}

void StartBattleInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  my_id_ = 0u;
  player_infos_ = NULL;
}

StartBattleInfo::~StartBattleInfo() {
  // @@protoc_insertion_point(destructor:Proto.StartBattleInfo)
  SharedDtor();
}

void StartBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_infos_;
  }
}

void StartBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartBattleInfo_descriptor_;
}

const StartBattleInfo& StartBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

StartBattleInfo* StartBattleInfo::default_instance_ = NULL;

StartBattleInfo* StartBattleInfo::New(::google::protobuf::Arena* arena) const {
  StartBattleInfo* n = new StartBattleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartBattleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.StartBattleInfo)
  my_id_ = 0u;
  if (GetArenaNoVirtual() == NULL && player_infos_ != NULL) delete player_infos_;
  player_infos_ = NULL;
}

bool StartBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.StartBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 my_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_infos;
        break;
      }

      // optional .Proto.GamePlayerInfos player_infos = 2;
      case 2: {
        if (tag == 18) {
         parse_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.StartBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.StartBattleInfo)
  return false;
#undef DO_
}

void StartBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.StartBattleInfo)
  // optional uint32 my_id = 1;
  if (this->my_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->my_id(), output);
  }

  // optional .Proto.GamePlayerInfos player_infos = 2;
  if (this->has_player_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_infos_, output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.StartBattleInfo)
}

::google::protobuf::uint8* StartBattleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.StartBattleInfo)
  // optional uint32 my_id = 1;
  if (this->my_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->my_id(), target);
  }

  // optional .Proto.GamePlayerInfos player_infos = 2;
  if (this->has_player_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_infos_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.StartBattleInfo)
  return target;
}

int StartBattleInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.StartBattleInfo)
  int total_size = 0;

  // optional uint32 my_id = 1;
  if (this->my_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->my_id());
  }

  // optional .Proto.GamePlayerInfos player_infos = 2;
  if (this->has_player_infos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_infos_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.StartBattleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartBattleInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartBattleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.StartBattleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.StartBattleInfo)
    MergeFrom(*source);
  }
}

void StartBattleInfo::MergeFrom(const StartBattleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.StartBattleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.my_id() != 0) {
    set_my_id(from.my_id());
  }
  if (from.has_player_infos()) {
    mutable_player_infos()->::Proto::GamePlayerInfos::MergeFrom(from.player_infos());
  }
}

void StartBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.StartBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartBattleInfo::CopyFrom(const StartBattleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.StartBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBattleInfo::IsInitialized() const {

  return true;
}

void StartBattleInfo::Swap(StartBattleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartBattleInfo::InternalSwap(StartBattleInfo* other) {
  std::swap(my_id_, other->my_id_);
  std::swap(player_infos_, other->player_infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartBattleInfo_descriptor_;
  metadata.reflection = StartBattleInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartBattleInfo

// optional uint32 my_id = 1;
void StartBattleInfo::clear_my_id() {
  my_id_ = 0u;
}
 ::google::protobuf::uint32 StartBattleInfo::my_id() const {
  // @@protoc_insertion_point(field_get:Proto.StartBattleInfo.my_id)
  return my_id_;
}
 void StartBattleInfo::set_my_id(::google::protobuf::uint32 value) {
  
  my_id_ = value;
  // @@protoc_insertion_point(field_set:Proto.StartBattleInfo.my_id)
}

// optional .Proto.GamePlayerInfos player_infos = 2;
bool StartBattleInfo::has_player_infos() const {
  return !_is_default_instance_ && player_infos_ != NULL;
}
void StartBattleInfo::clear_player_infos() {
  if (GetArenaNoVirtual() == NULL && player_infos_ != NULL) delete player_infos_;
  player_infos_ = NULL;
}
const ::Proto::GamePlayerInfos& StartBattleInfo::player_infos() const {
  // @@protoc_insertion_point(field_get:Proto.StartBattleInfo.player_infos)
  return player_infos_ != NULL ? *player_infos_ : *default_instance_->player_infos_;
}
::Proto::GamePlayerInfos* StartBattleInfo::mutable_player_infos() {
  
  if (player_infos_ == NULL) {
    player_infos_ = new ::Proto::GamePlayerInfos;
  }
  // @@protoc_insertion_point(field_mutable:Proto.StartBattleInfo.player_infos)
  return player_infos_;
}
::Proto::GamePlayerInfos* StartBattleInfo::release_player_infos() {
  // @@protoc_insertion_point(field_release:Proto.StartBattleInfo.player_infos)
  
  ::Proto::GamePlayerInfos* temp = player_infos_;
  player_infos_ = NULL;
  return temp;
}
void StartBattleInfo::set_allocated_player_infos(::Proto::GamePlayerInfos* player_infos) {
  delete player_infos_;
  player_infos_ = player_infos;
  if (player_infos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Proto.StartBattleInfo.player_infos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCommond::kXAxisFieldNumber;
const int GameCommond::kYAxisFieldNumber;
const int GameCommond::kJumpFieldNumber;
const int GameCommond::kSkillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCommond::GameCommond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameCommond)
}

void GameCommond::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameCommond::GameCommond(const GameCommond& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.GameCommond)
}

void GameCommond::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_axis_ = 0;
  y_axis_ = 0;
  jump_ = false;
  skill_ = 0;
}

GameCommond::~GameCommond() {
  // @@protoc_insertion_point(destructor:Proto.GameCommond)
  SharedDtor();
}

void GameCommond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameCommond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCommond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameCommond_descriptor_;
}

const GameCommond& GameCommond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GameCommond* GameCommond::default_instance_ = NULL;

GameCommond* GameCommond::New(::google::protobuf::Arena* arena) const {
  GameCommond* n = new GameCommond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCommond::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameCommond)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameCommond, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameCommond*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_axis_, skill_);

#undef ZR_HELPER_
#undef ZR_

}

bool GameCommond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameCommond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_axis = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_axis_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_axis;
        break;
      }

      // optional float y_axis = 2;
      case 2: {
        if (tag == 21) {
         parse_y_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_axis_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_jump;
        break;
      }

      // optional bool jump = 3;
      case 3: {
        if (tag == 24) {
         parse_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill;
        break;
      }

      // optional int32 skill = 4;
      case 4: {
        if (tag == 32) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameCommond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameCommond)
  return false;
#undef DO_
}

void GameCommond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameCommond)
  // optional float x_axis = 1;
  if (this->x_axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_axis(), output);
  }

  // optional float y_axis = 2;
  if (this->y_axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_axis(), output);
  }

  // optional bool jump = 3;
  if (this->jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->jump(), output);
  }

  // optional int32 skill = 4;
  if (this->skill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill(), output);
  }

  // @@protoc_insertion_point(serialize_end:Proto.GameCommond)
}

::google::protobuf::uint8* GameCommond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameCommond)
  // optional float x_axis = 1;
  if (this->x_axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_axis(), target);
  }

  // optional float y_axis = 2;
  if (this->y_axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_axis(), target);
  }

  // optional bool jump = 3;
  if (this->jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->jump(), target);
  }

  // optional int32 skill = 4;
  if (this->skill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameCommond)
  return target;
}

int GameCommond::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameCommond)
  int total_size = 0;

  // optional float x_axis = 1;
  if (this->x_axis() != 0) {
    total_size += 1 + 4;
  }

  // optional float y_axis = 2;
  if (this->y_axis() != 0) {
    total_size += 1 + 4;
  }

  // optional bool jump = 3;
  if (this->jump() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 skill = 4;
  if (this->skill() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skill());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCommond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameCommond)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameCommond* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCommond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameCommond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameCommond)
    MergeFrom(*source);
  }
}

void GameCommond::MergeFrom(const GameCommond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameCommond)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x_axis() != 0) {
    set_x_axis(from.x_axis());
  }
  if (from.y_axis() != 0) {
    set_y_axis(from.y_axis());
  }
  if (from.jump() != 0) {
    set_jump(from.jump());
  }
  if (from.skill() != 0) {
    set_skill(from.skill());
  }
}

void GameCommond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameCommond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCommond::CopyFrom(const GameCommond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameCommond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCommond::IsInitialized() const {

  return true;
}

void GameCommond::Swap(GameCommond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCommond::InternalSwap(GameCommond* other) {
  std::swap(x_axis_, other->x_axis_);
  std::swap(y_axis_, other->y_axis_);
  std::swap(jump_, other->jump_);
  std::swap(skill_, other->skill_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCommond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameCommond_descriptor_;
  metadata.reflection = GameCommond_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameCommond

// optional float x_axis = 1;
void GameCommond::clear_x_axis() {
  x_axis_ = 0;
}
 float GameCommond::x_axis() const {
  // @@protoc_insertion_point(field_get:Proto.GameCommond.x_axis)
  return x_axis_;
}
 void GameCommond::set_x_axis(float value) {
  
  x_axis_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameCommond.x_axis)
}

// optional float y_axis = 2;
void GameCommond::clear_y_axis() {
  y_axis_ = 0;
}
 float GameCommond::y_axis() const {
  // @@protoc_insertion_point(field_get:Proto.GameCommond.y_axis)
  return y_axis_;
}
 void GameCommond::set_y_axis(float value) {
  
  y_axis_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameCommond.y_axis)
}

// optional bool jump = 3;
void GameCommond::clear_jump() {
  jump_ = false;
}
 bool GameCommond::jump() const {
  // @@protoc_insertion_point(field_get:Proto.GameCommond.jump)
  return jump_;
}
 void GameCommond::set_jump(bool value) {
  
  jump_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameCommond.jump)
}

// optional int32 skill = 4;
void GameCommond::clear_skill() {
  skill_ = 0;
}
 ::google::protobuf::int32 GameCommond::skill() const {
  // @@protoc_insertion_point(field_get:Proto.GameCommond.skill)
  return skill_;
}
 void GameCommond::set_skill(::google::protobuf::int32 value) {
  
  skill_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameCommond.skill)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCommondGroup::kCommondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCommondGroup::GameCommondGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameCommondGroup)
}

void GameCommondGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameCommondGroup::GameCommondGroup(const GameCommondGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto.GameCommondGroup)
}

void GameCommondGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  commonds_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  commonds_.SetEntryDescriptor(
      &::Proto::GameCommondGroup_CommondsEntry_descriptor_);
}

GameCommondGroup::~GameCommondGroup() {
  // @@protoc_insertion_point(destructor:Proto.GameCommondGroup)
  SharedDtor();
}

void GameCommondGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameCommondGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCommondGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameCommondGroup_descriptor_;
}

const GameCommondGroup& GameCommondGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

GameCommondGroup* GameCommondGroup::default_instance_ = NULL;

GameCommondGroup* GameCommondGroup::New(::google::protobuf::Arena* arena) const {
  GameCommondGroup* n = new GameCommondGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameCommondGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameCommondGroup)
  commonds_.Clear();
}

bool GameCommondGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameCommondGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .Proto.GameCommond> commonds = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_commonds:
          GameCommondGroup_CommondsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::Proto::GameCommond,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond > > parser(&commonds_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_commonds;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameCommondGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameCommondGroup)
  return false;
#undef DO_
}

void GameCommondGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameCommondGroup)
  // map<uint32, .Proto.GameCommond> commonds = 1;
  if (!this->commonds().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->commonds().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->commonds().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_iterator
          it = this->commonds().begin();
          it != this->commonds().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GameCommondGroup_CommondsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(commonds_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameCommondGroup_CommondsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_iterator
          it = this->commonds().begin();
          it != this->commonds().end(); ++it) {
        entry.reset(commonds_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:Proto.GameCommondGroup)
}

::google::protobuf::uint8* GameCommondGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameCommondGroup)
  // map<uint32, .Proto.GameCommond> commonds = 1;
  if (!this->commonds().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->commonds().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->commonds().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_iterator
          it = this->commonds().begin();
          it != this->commonds().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GameCommondGroup_CommondsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(commonds_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GameCommondGroup_CommondsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_iterator
          it = this->commonds().begin();
          it != this->commonds().end(); ++it) {
        entry.reset(commonds_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameCommondGroup)
  return target;
}

int GameCommondGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameCommondGroup)
  int total_size = 0;

  // map<uint32, .Proto.GameCommond> commonds = 1;
  total_size += 1 * this->commonds_size();
  {
    ::google::protobuf::scoped_ptr<GameCommondGroup_CommondsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >::const_iterator
        it = this->commonds().begin();
        it != this->commonds().end(); ++it) {
      entry.reset(commonds_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCommondGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameCommondGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameCommondGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCommondGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameCommondGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameCommondGroup)
    MergeFrom(*source);
  }
}

void GameCommondGroup::MergeFrom(const GameCommondGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameCommondGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  commonds_.MergeFrom(from.commonds_);
}

void GameCommondGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameCommondGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCommondGroup::CopyFrom(const GameCommondGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameCommondGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCommondGroup::IsInitialized() const {

  return true;
}

void GameCommondGroup::Swap(GameCommondGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCommondGroup::InternalSwap(GameCommondGroup* other) {
  commonds_.Swap(&other->commonds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCommondGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameCommondGroup_descriptor_;
  metadata.reflection = GameCommondGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameCommondGroup

// map<uint32, .Proto.GameCommond> commonds = 1;
int GameCommondGroup::commonds_size() const {
  return commonds_.size();
}
void GameCommondGroup::clear_commonds() {
  commonds_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >&
GameCommondGroup::commonds() const {
  // @@protoc_insertion_point(field_map:Proto.GameCommondGroup.commonds)
  return commonds_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::Proto::GameCommond >*
GameCommondGroup::mutable_commonds() {
  // @@protoc_insertion_point(field_mutable_map:Proto.GameCommondGroup.commonds)
  return commonds_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

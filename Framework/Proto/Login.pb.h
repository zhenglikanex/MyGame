// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_Login_2eproto__INCLUDED
#define PROTOBUF_Login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "UserData.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Login_2eproto();
void protobuf_AssignDesc_Login_2eproto();
void protobuf_ShutdownFile_Login_2eproto();

class ReqLogin;
class RspLogin;

enum LoginError {
  kLoginSuccess = 0,
  kNotAccount = 1,
  kUserNameOrPwdError = 2,
  kAccountOnline = 3,
  LoginError_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginError_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginError_IsValid(int value);
const LoginError LoginError_MIN = kLoginSuccess;
const LoginError LoginError_MAX = kAccountOnline;
const int LoginError_ARRAYSIZE = LoginError_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginError_descriptor();
inline const ::std::string& LoginError_Name(LoginError value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginError_descriptor(), value);
}
inline bool LoginError_Parse(
    const ::std::string& name, LoginError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginError>(
    LoginError_descriptor(), name, value);
}
// ===================================================================

class ReqLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReqLogin) */ {
 public:
  ReqLogin();
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogin& default_instance();

  void Swap(ReqLogin* other);

  // implements Message ----------------------------------------------

  inline ReqLogin* New() const { return New(NULL); }

  ReqLogin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ReqLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static ReqLogin* default_instance_;
};
// -------------------------------------------------------------------

class RspLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RspLogin) */ {
 public:
  RspLogin();
  virtual ~RspLogin();

  RspLogin(const RspLogin& from);

  inline RspLogin& operator=(const RspLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspLogin& default_instance();

  void Swap(RspLogin* other);

  // implements Message ----------------------------------------------

  inline RspLogin* New() const { return New(NULL); }

  RspLogin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspLogin& from);
  void MergeFrom(const RspLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RspLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LoginError status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::LoginError status() const;
  void set_status(::LoginError value);

  // optional .UserData user_data = 2;
  bool has_user_data() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 2;
  const ::UserData& user_data() const;
  ::UserData* mutable_user_data();
  ::UserData* release_user_data();
  void set_allocated_user_data(::UserData* user_data);

  // @@protoc_insertion_point(class_scope:RspLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::UserData* user_data_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static RspLogin* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLogin

// optional string account = 1;
inline void ReqLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqLogin::account() const {
  // @@protoc_insertion_point(field_get:ReqLogin.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReqLogin.account)
}
inline void ReqLogin::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReqLogin.account)
}
inline void ReqLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReqLogin.account)
}
inline ::std::string* ReqLogin::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:ReqLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLogin::release_account() {
  // @@protoc_insertion_point(field_release:ReqLogin.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:ReqLogin.account)
}

// optional string password = 2;
inline void ReqLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqLogin::password() const {
  // @@protoc_insertion_point(field_get:ReqLogin.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReqLogin.password)
}
inline void ReqLogin::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReqLogin.password)
}
inline void ReqLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReqLogin.password)
}
inline ::std::string* ReqLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ReqLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLogin::release_password() {
  // @@protoc_insertion_point(field_release:ReqLogin.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ReqLogin.password)
}

// -------------------------------------------------------------------

// RspLogin

// optional .LoginError status = 1;
inline void RspLogin::clear_status() {
  status_ = 0;
}
inline ::LoginError RspLogin::status() const {
  // @@protoc_insertion_point(field_get:RspLogin.status)
  return static_cast< ::LoginError >(status_);
}
inline void RspLogin::set_status(::LoginError value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RspLogin.status)
}

// optional .UserData user_data = 2;
inline bool RspLogin::has_user_data() const {
  return !_is_default_instance_ && user_data_ != NULL;
}
inline void RspLogin::clear_user_data() {
  if (GetArenaNoVirtual() == NULL && user_data_ != NULL) delete user_data_;
  user_data_ = NULL;
}
inline const ::UserData& RspLogin::user_data() const {
  // @@protoc_insertion_point(field_get:RspLogin.user_data)
  return user_data_ != NULL ? *user_data_ : *default_instance_->user_data_;
}
inline ::UserData* RspLogin::mutable_user_data() {
  
  if (user_data_ == NULL) {
    user_data_ = new ::UserData;
  }
  // @@protoc_insertion_point(field_mutable:RspLogin.user_data)
  return user_data_;
}
inline ::UserData* RspLogin::release_user_data() {
  // @@protoc_insertion_point(field_release:RspLogin.user_data)
  
  ::UserData* temp = user_data_;
  user_data_ = NULL;
  return temp;
}
inline void RspLogin::set_allocated_user_data(::UserData* user_data) {
  delete user_data_;
  user_data_ = user_data;
  if (user_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RspLogin.user_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LoginError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginError>() {
  return ::LoginError_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Login_2eproto__INCLUDED

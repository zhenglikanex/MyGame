// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChangeUserName.proto

#ifndef PROTOBUF_ChangeUserName_2eproto__INCLUDED
#define PROTOBUF_ChangeUserName_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ChangeUserName_2eproto();
void protobuf_AssignDesc_ChangeUserName_2eproto();
void protobuf_ShutdownFile_ChangeUserName_2eproto();

class ReqChangeName;
class RspChangeName;

enum ChangeNameError {
  kChangeNameSuccess = 0,
  kChangeNameRepeat = 1,
  kChangeNameIllega = 2,
  ChangeNameError_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChangeNameError_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChangeNameError_IsValid(int value);
const ChangeNameError ChangeNameError_MIN = kChangeNameSuccess;
const ChangeNameError ChangeNameError_MAX = kChangeNameIllega;
const int ChangeNameError_ARRAYSIZE = ChangeNameError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeNameError_descriptor();
inline const ::std::string& ChangeNameError_Name(ChangeNameError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeNameError_descriptor(), value);
}
inline bool ChangeNameError_Parse(
    const ::std::string& name, ChangeNameError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeNameError>(
    ChangeNameError_descriptor(), name, value);
}
// ===================================================================

class ReqChangeName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReqChangeName) */ {
 public:
  ReqChangeName();
  virtual ~ReqChangeName();

  ReqChangeName(const ReqChangeName& from);

  inline ReqChangeName& operator=(const ReqChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangeName& default_instance();

  void Swap(ReqChangeName* other);

  // implements Message ----------------------------------------------

  inline ReqChangeName* New() const { return New(NULL); }

  ReqChangeName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangeName& from);
  void MergeFrom(const ReqChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqChangeName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ReqChangeName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ChangeUserName_2eproto();
  friend void protobuf_AssignDesc_ChangeUserName_2eproto();
  friend void protobuf_ShutdownFile_ChangeUserName_2eproto();

  void InitAsDefaultInstance();
  static ReqChangeName* default_instance_;
};
// -------------------------------------------------------------------

class RspChangeName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RspChangeName) */ {
 public:
  RspChangeName();
  virtual ~RspChangeName();

  RspChangeName(const RspChangeName& from);

  inline RspChangeName& operator=(const RspChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspChangeName& default_instance();

  void Swap(RspChangeName* other);

  // implements Message ----------------------------------------------

  inline RspChangeName* New() const { return New(NULL); }

  RspChangeName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspChangeName& from);
  void MergeFrom(const RspChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RspChangeName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ChangeNameError status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::ChangeNameError status() const;
  void set_status(::ChangeNameError value);

  // @@protoc_insertion_point(class_scope:RspChangeName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ChangeUserName_2eproto();
  friend void protobuf_AssignDesc_ChangeUserName_2eproto();
  friend void protobuf_ShutdownFile_ChangeUserName_2eproto();

  void InitAsDefaultInstance();
  static RspChangeName* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqChangeName

// optional string name = 1;
inline void ReqChangeName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqChangeName::name() const {
  // @@protoc_insertion_point(field_get:ReqChangeName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqChangeName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReqChangeName.name)
}
inline void ReqChangeName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReqChangeName.name)
}
inline void ReqChangeName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReqChangeName.name)
}
inline ::std::string* ReqChangeName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ReqChangeName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqChangeName::release_name() {
  // @@protoc_insertion_point(field_release:ReqChangeName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqChangeName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ReqChangeName.name)
}

// -------------------------------------------------------------------

// RspChangeName

// optional .ChangeNameError status = 1;
inline void RspChangeName::clear_status() {
  status_ = 0;
}
inline ::ChangeNameError RspChangeName::status() const {
  // @@protoc_insertion_point(field_get:RspChangeName.status)
  return static_cast< ::ChangeNameError >(status_);
}
inline void RspChangeName::set_status(::ChangeNameError value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RspChangeName.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ChangeNameError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChangeNameError>() {
  return ::ChangeNameError_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChangeUserName_2eproto__INCLUDED

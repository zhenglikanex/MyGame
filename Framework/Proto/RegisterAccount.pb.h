// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterAccount.proto

#ifndef PROTOBUF_RegisterAccount_2eproto__INCLUDED
#define PROTOBUF_RegisterAccount_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RegisterAccount_2eproto();
void protobuf_AssignDesc_RegisterAccount_2eproto();
void protobuf_ShutdownFile_RegisterAccount_2eproto();

class ReqRegAccount;
class RspRegAccount;

enum RegisterError {
  kRegSuccess = 0,
  kAcountRepeat = 1,
  kAcountIllega = 2,
  RegisterError_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RegisterError_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RegisterError_IsValid(int value);
const RegisterError RegisterError_MIN = kRegSuccess;
const RegisterError RegisterError_MAX = kAcountIllega;
const int RegisterError_ARRAYSIZE = RegisterError_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegisterError_descriptor();
inline const ::std::string& RegisterError_Name(RegisterError value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegisterError_descriptor(), value);
}
inline bool RegisterError_Parse(
    const ::std::string& name, RegisterError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegisterError>(
    RegisterError_descriptor(), name, value);
}
// ===================================================================

class ReqRegAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReqRegAccount) */ {
 public:
  ReqRegAccount();
  virtual ~ReqRegAccount();

  ReqRegAccount(const ReqRegAccount& from);

  inline ReqRegAccount& operator=(const ReqRegAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegAccount& default_instance();

  void Swap(ReqRegAccount* other);

  // implements Message ----------------------------------------------

  inline ReqRegAccount* New() const { return New(NULL); }

  ReqRegAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegAccount& from);
  void MergeFrom(const ReqRegAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqRegAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ReqRegAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RegisterAccount_2eproto();
  friend void protobuf_AssignDesc_RegisterAccount_2eproto();
  friend void protobuf_ShutdownFile_RegisterAccount_2eproto();

  void InitAsDefaultInstance();
  static ReqRegAccount* default_instance_;
};
// -------------------------------------------------------------------

class RspRegAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RspRegAccount) */ {
 public:
  RspRegAccount();
  virtual ~RspRegAccount();

  RspRegAccount(const RspRegAccount& from);

  inline RspRegAccount& operator=(const RspRegAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RspRegAccount& default_instance();

  void Swap(RspRegAccount* other);

  // implements Message ----------------------------------------------

  inline RspRegAccount* New() const { return New(NULL); }

  RspRegAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RspRegAccount& from);
  void MergeFrom(const RspRegAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RspRegAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RegisterError status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::RegisterError status() const;
  void set_status(::RegisterError value);

  // @@protoc_insertion_point(class_scope:RspRegAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RegisterAccount_2eproto();
  friend void protobuf_AssignDesc_RegisterAccount_2eproto();
  friend void protobuf_ShutdownFile_RegisterAccount_2eproto();

  void InitAsDefaultInstance();
  static RspRegAccount* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegAccount

// optional string account = 1;
inline void ReqRegAccount::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRegAccount::account() const {
  // @@protoc_insertion_point(field_get:ReqRegAccount.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegAccount::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReqRegAccount.account)
}
inline void ReqRegAccount::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReqRegAccount.account)
}
inline void ReqRegAccount::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReqRegAccount.account)
}
inline ::std::string* ReqRegAccount::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:ReqRegAccount.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegAccount::release_account() {
  // @@protoc_insertion_point(field_release:ReqRegAccount.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegAccount::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:ReqRegAccount.account)
}

// optional string password = 2;
inline void ReqRegAccount::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqRegAccount::password() const {
  // @@protoc_insertion_point(field_get:ReqRegAccount.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegAccount::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReqRegAccount.password)
}
inline void ReqRegAccount::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReqRegAccount.password)
}
inline void ReqRegAccount::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReqRegAccount.password)
}
inline ::std::string* ReqRegAccount::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ReqRegAccount.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegAccount::release_password() {
  // @@protoc_insertion_point(field_release:ReqRegAccount.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegAccount::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ReqRegAccount.password)
}

// -------------------------------------------------------------------

// RspRegAccount

// optional .RegisterError status = 1;
inline void RspRegAccount::clear_status() {
  status_ = 0;
}
inline ::RegisterError RspRegAccount::status() const {
  // @@protoc_insertion_point(field_get:RspRegAccount.status)
  return static_cast< ::RegisterError >(status_);
}
inline void RspRegAccount::set_status(::RegisterError value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RspRegAccount.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RegisterError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RegisterError>() {
  return ::RegisterError_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RegisterAccount_2eproto__INCLUDED

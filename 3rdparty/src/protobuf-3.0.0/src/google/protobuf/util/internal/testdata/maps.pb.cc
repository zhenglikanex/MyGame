// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/util/internal/testdata/maps.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include <google/protobuf/util/internal/testdata/maps.pb.h>

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
namespace testing {
namespace maps {

namespace {

const ::google::protobuf::Descriptor* MapIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapIn_MapInputEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOut_Map1Entry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapOut_Map2Entry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapOut_Map3Entry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapOut_Map4Entry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapOutWireFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOutWireFormat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOutWireFormat_Map1Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOutWireFormat_Map1Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOutWireFormat_Map2Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOutWireFormat_Map2Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOutWireFormat_Map3Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOutWireFormat_Map3Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapOutWireFormat_Map4Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOutWireFormat_Map4Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapM_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/protobuf/util/internal/testdata/maps.proto");
  GOOGLE_CHECK(file != NULL);
  MapIn_descriptor_ = file->message_type(0);
  static const int MapIn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapIn, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapIn, things_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapIn, map_input_),
  };
  MapIn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapIn_descriptor_,
      MapIn::default_instance_,
      MapIn_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapIn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapIn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapIn, _is_default_instance_));
  MapIn_MapInputEntry_descriptor_ = MapIn_descriptor_->nested_type(0);
  MapOut_descriptor_ = file->message_type(1);
  static const int MapOut_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, map1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, map2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, map3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, map4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, bar_),
  };
  MapOut_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOut_descriptor_,
      MapOut::default_instance_,
      MapOut_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOut),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOut, _is_default_instance_));
  MapOut_Map1Entry_descriptor_ = MapOut_descriptor_->nested_type(0);
  MapOut_Map2Entry_descriptor_ = MapOut_descriptor_->nested_type(1);
  MapOut_Map3Entry_descriptor_ = MapOut_descriptor_->nested_type(2);
  MapOut_Map4Entry_descriptor_ = MapOut_descriptor_->nested_type(3);
  MapOutWireFormat_descriptor_ = file->message_type(2);
  static const int MapOutWireFormat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, map1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, map2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, map3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, map4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, bar_),
  };
  MapOutWireFormat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOutWireFormat_descriptor_,
      MapOutWireFormat::default_instance_,
      MapOutWireFormat_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOutWireFormat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat, _is_default_instance_));
  MapOutWireFormat_Map1Entry_descriptor_ = MapOutWireFormat_descriptor_->nested_type(0);
  static const int MapOutWireFormat_Map1Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map1Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map1Entry, value_),
  };
  MapOutWireFormat_Map1Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOutWireFormat_Map1Entry_descriptor_,
      MapOutWireFormat_Map1Entry::default_instance_,
      MapOutWireFormat_Map1Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOutWireFormat_Map1Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map1Entry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map1Entry, _is_default_instance_));
  MapOutWireFormat_Map2Entry_descriptor_ = MapOutWireFormat_descriptor_->nested_type(1);
  static const int MapOutWireFormat_Map2Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map2Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map2Entry, value_),
  };
  MapOutWireFormat_Map2Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOutWireFormat_Map2Entry_descriptor_,
      MapOutWireFormat_Map2Entry::default_instance_,
      MapOutWireFormat_Map2Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOutWireFormat_Map2Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map2Entry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map2Entry, _is_default_instance_));
  MapOutWireFormat_Map3Entry_descriptor_ = MapOutWireFormat_descriptor_->nested_type(2);
  static const int MapOutWireFormat_Map3Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map3Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map3Entry, value_),
  };
  MapOutWireFormat_Map3Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOutWireFormat_Map3Entry_descriptor_,
      MapOutWireFormat_Map3Entry::default_instance_,
      MapOutWireFormat_Map3Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOutWireFormat_Map3Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map3Entry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map3Entry, _is_default_instance_));
  MapOutWireFormat_Map4Entry_descriptor_ = MapOutWireFormat_descriptor_->nested_type(3);
  static const int MapOutWireFormat_Map4Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map4Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map4Entry, value_),
  };
  MapOutWireFormat_Map4Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapOutWireFormat_Map4Entry_descriptor_,
      MapOutWireFormat_Map4Entry::default_instance_,
      MapOutWireFormat_Map4Entry_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapOutWireFormat_Map4Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map4Entry, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOutWireFormat_Map4Entry, _is_default_instance_));
  MapM_descriptor_ = file->message_type(3);
  static const int MapM_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapM, foo_),
  };
  MapM_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapM_descriptor_,
      MapM::default_instance_,
      MapM_offsets_,
      -1,
      -1,
      -1,
      sizeof(MapM),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapM, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapM, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapIn_descriptor_, &MapIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MapIn_MapInputEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                MapIn_MapInputEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOut_descriptor_, &MapOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MapOut_Map1Entry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::testing::maps::MapM,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MapOut_Map1Entry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MapOut_Map2Entry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::testing::maps::MapOut,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MapOut_Map2Entry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MapOut_Map3Entry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                MapOut_Map3Entry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MapOut_Map4Entry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            bool,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                MapOut_Map4Entry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOutWireFormat_descriptor_, &MapOutWireFormat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOutWireFormat_Map1Entry_descriptor_, &MapOutWireFormat_Map1Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOutWireFormat_Map2Entry_descriptor_, &MapOutWireFormat_Map2Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOutWireFormat_Map3Entry_descriptor_, &MapOutWireFormat_Map3Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapOutWireFormat_Map4Entry_descriptor_, &MapOutWireFormat_Map4Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapM_descriptor_, &MapM::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  delete MapIn::default_instance_;
  delete MapIn_reflection_;
  delete MapOut::default_instance_;
  delete MapOut_reflection_;
  delete MapOutWireFormat::default_instance_;
  delete MapOutWireFormat_reflection_;
  delete MapOutWireFormat_Map1Entry::default_instance_;
  delete MapOutWireFormat_Map1Entry_reflection_;
  delete MapOutWireFormat_Map2Entry::default_instance_;
  delete MapOutWireFormat_Map2Entry_reflection_;
  delete MapOutWireFormat_Map3Entry::default_instance_;
  delete MapOutWireFormat_Map3Entry_reflection_;
  delete MapOutWireFormat_Map4Entry::default_instance_;
  delete MapOutWireFormat_Map4Entry_reflection_;
  delete MapM::default_instance_;
  delete MapM_reflection_;
}

void protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n1google/protobuf/util/internal/testdata"
    "/maps.proto\022\034google.protobuf.testing.map"
    "s\"\235\001\n\005MapIn\022\r\n\005other\030\001 \001(\t\022\016\n\006things\030\002 \003"
    "(\t\022D\n\tmap_input\030\003 \003(\01321.google.protobuf."
    "testing.maps.MapIn.MapInputEntry\032/\n\rMapI"
    "nputEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
    "\001\"\213\004\n\006MapOut\022<\n\004map1\030\001 \003(\0132..google.prot"
    "obuf.testing.maps.MapOut.Map1Entry\022<\n\004ma"
    "p2\030\002 \003(\0132..google.protobuf.testing.maps."
    "MapOut.Map2Entry\022<\n\004map3\030\003 \003(\0132..google."
    "protobuf.testing.maps.MapOut.Map3Entry\022<"
    "\n\004map4\030\005 \003(\0132..google.protobuf.testing.m"
    "aps.MapOut.Map4Entry\022\013\n\003bar\030\004 \001(\t\032O\n\tMap"
    "1Entry\022\013\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".goo"
    "gle.protobuf.testing.maps.MapM:\0028\001\032Q\n\tMa"
    "p2Entry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 \001(\0132$.go"
    "ogle.protobuf.testing.maps.MapOut:\0028\001\032+\n"
    "\tMap3Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\032+\n\tMap4Entry\022\013\n\003key\030\001 \001(\010\022\r\n\005value\030\002 "
    "\001(\t:\0028\001\"\255\004\n\020MapOutWireFormat\022F\n\004map1\030\001 \003"
    "(\01328.google.protobuf.testing.maps.MapOut"
    "WireFormat.Map1Entry\022F\n\004map2\030\002 \003(\01328.goo"
    "gle.protobuf.testing.maps.MapOutWireForm"
    "at.Map2Entry\022F\n\004map3\030\003 \003(\01328.google.prot"
    "obuf.testing.maps.MapOutWireFormat.Map3E"
    "ntry\022F\n\004map4\030\005 \003(\01328.google.protobuf.tes"
    "ting.maps.MapOutWireFormat.Map4Entry\022\013\n\003"
    "bar\030\004 \001(\t\032K\n\tMap1Entry\022\013\n\003key\030\001 \001(\t\0221\n\005v"
    "alue\030\002 \001(\0132\".google.protobuf.testing.map"
    "s.MapM\032M\n\tMap2Entry\022\013\n\003key\030\001 \001(\t\0223\n\005valu"
    "e\030\002 \001(\0132$.google.protobuf.testing.maps.M"
    "apOut\032\'\n\tMap3Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
    "\030\002 \001(\t\032\'\n\tMap4Entry\022\013\n\003key\030\001 \001(\010\022\r\n\005valu"
    "e\030\002 \001(\t\"\023\n\004MapM\022\013\n\003foo\030\001 \001(\t2\265\001\n\013TestSer"
    "vice\022R\n\005Call1\022#.google.protobuf.testing."
    "maps.MapIn\032$.google.protobuf.testing.map"
    "s.MapOut\022R\n\005Call2\022#.google.protobuf.test"
    "ing.maps.MapIn\032$.google.protobuf.testing"
    ".maps.MapOutB\"\n com.google.protobuf.test"
    "ing.mapsb\006proto3", 1576);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/protobuf/util/internal/testdata/maps.proto", &protobuf_RegisterTypes);
  MapIn::default_instance_ = new MapIn();
  MapOut::default_instance_ = new MapOut();
  MapOutWireFormat::default_instance_ = new MapOutWireFormat();
  MapOutWireFormat_Map1Entry::default_instance_ = new MapOutWireFormat_Map1Entry();
  MapOutWireFormat_Map2Entry::default_instance_ = new MapOutWireFormat_Map2Entry();
  MapOutWireFormat_Map3Entry::default_instance_ = new MapOutWireFormat_Map3Entry();
  MapOutWireFormat_Map4Entry::default_instance_ = new MapOutWireFormat_Map4Entry();
  MapM::default_instance_ = new MapM();
  MapIn::default_instance_->InitAsDefaultInstance();
  MapOut::default_instance_->InitAsDefaultInstance();
  MapOutWireFormat::default_instance_->InitAsDefaultInstance();
  MapOutWireFormat_Map1Entry::default_instance_->InitAsDefaultInstance();
  MapOutWireFormat_Map2Entry::default_instance_->InitAsDefaultInstance();
  MapOutWireFormat_Map3Entry::default_instance_->InitAsDefaultInstance();
  MapOutWireFormat_Map4Entry::default_instance_->InitAsDefaultInstance();
  MapM::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto() {
    protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapIn::kOtherFieldNumber;
const int MapIn::kThingsFieldNumber;
const int MapIn::kMapInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapIn::MapIn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapIn)
}

void MapIn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapIn::MapIn(const MapIn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapIn)
}

void MapIn::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_input_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_input_.SetEntryDescriptor(
      &::google::protobuf::testing::maps::MapIn_MapInputEntry_descriptor_);
}

MapIn::~MapIn() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapIn)
  SharedDtor();
}

void MapIn::SharedDtor() {
  other_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MapIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapIn_descriptor_;
}

const MapIn& MapIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapIn* MapIn::default_instance_ = NULL;

MapIn* MapIn::New(::google::protobuf::Arena* arena) const {
  MapIn* n = new MapIn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapIn::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapIn)
  other_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  things_.Clear();
  map_input_.Clear();
}

bool MapIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string other = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->other().data(), this->other().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapIn.other"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_things;
        break;
      }

      // repeated string things = 2;
      case 2: {
        if (tag == 18) {
         parse_things:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_things()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->things(this->things_size() - 1).data(),
            this->things(this->things_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapIn.things"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_things;
        if (input->ExpectTag(26)) goto parse_map_input;
        break;
      }

      // map<string, string> map_input = 3;
      case 3: {
        if (tag == 26) {
         parse_map_input:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_input:
          MapIn_MapInputEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&map_input_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapIn.MapInputEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapIn.MapInputEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_map_input;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapIn)
  return false;
#undef DO_
}

void MapIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapIn)
  // optional string other = 1;
  if (this->other().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other().data(), this->other().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapIn.other");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->other(), output);
  }

  // repeated string things = 2;
  for (int i = 0; i < this->things_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->things(i).data(), this->things(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapIn.things");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->things(i), output);
  }

  // map<string, string> map_input = 3;
  if (!this->map_input().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapIn.MapInputEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapIn.MapInputEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map_input().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_input().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapIn_MapInputEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_input_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapIn_MapInputEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it) {
        entry.reset(map_input_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapIn)
}

::google::protobuf::uint8* MapIn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapIn)
  // optional string other = 1;
  if (this->other().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other().data(), this->other().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapIn.other");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->other(), target);
  }

  // repeated string things = 2;
  for (int i = 0; i < this->things_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->things(i).data(), this->things(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapIn.things");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->things(i), target);
  }

  // map<string, string> map_input = 3;
  if (!this->map_input().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapIn.MapInputEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapIn.MapInputEntry.value");
      }
    };

    if (deterministic &&
        this->map_input().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_input().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapIn_MapInputEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_input_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapIn_MapInputEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map_input().begin();
          it != this->map_input().end(); ++it) {
        entry.reset(map_input_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapIn)
  return target;
}

int MapIn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapIn)
  int total_size = 0;

  // optional string other = 1;
  if (this->other().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->other());
  }

  // repeated string things = 2;
  total_size += 1 * this->things_size();
  for (int i = 0; i < this->things_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->things(i));
  }

  // map<string, string> map_input = 3;
  total_size += 1 * this->map_input_size();
  {
    ::google::protobuf::scoped_ptr<MapIn_MapInputEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->map_input().begin();
        it != this->map_input().end(); ++it) {
      entry.reset(map_input_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapIn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapIn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapIn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapIn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapIn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapIn)
    MergeFrom(*source);
  }
}

void MapIn::MergeFrom(const MapIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapIn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  things_.MergeFrom(from.things_);
  map_input_.MergeFrom(from.map_input_);
  if (from.other().size() > 0) {

    other_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_);
  }
}

void MapIn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapIn::CopyFrom(const MapIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapIn::IsInitialized() const {

  return true;
}

void MapIn::Swap(MapIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapIn::InternalSwap(MapIn* other) {
  other_.Swap(&other->other_);
  things_.UnsafeArenaSwap(&other->things_);
  map_input_.Swap(&other->map_input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapIn_descriptor_;
  metadata.reflection = MapIn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapIn

// optional string other = 1;
void MapIn::clear_other() {
  other_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapIn::other() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapIn.other)
  return other_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapIn::set_other(const ::std::string& value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapIn.other)
}
 void MapIn::set_other(const char* value) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapIn.other)
}
 void MapIn::set_other(const char* value, size_t size) {
  
  other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapIn.other)
}
 ::std::string* MapIn::mutable_other() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapIn.other)
  return other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapIn::release_other() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapIn.other)
  
  return other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapIn::set_allocated_other(::std::string* other) {
  if (other != NULL) {
    
  } else {
    
  }
  other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapIn.other)
}

// repeated string things = 2;
int MapIn::things_size() const {
  return things_.size();
}
void MapIn::clear_things() {
  things_.Clear();
}
 const ::std::string& MapIn::things(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapIn.things)
  return things_.Get(index);
}
 ::std::string* MapIn::mutable_things(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapIn.things)
  return things_.Mutable(index);
}
 void MapIn::set_things(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapIn.things)
  things_.Mutable(index)->assign(value);
}
 void MapIn::set_things(int index, const char* value) {
  things_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapIn.things)
}
 void MapIn::set_things(int index, const char* value, size_t size) {
  things_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapIn.things)
}
 ::std::string* MapIn::add_things() {
  // @@protoc_insertion_point(field_add_mutable:google.protobuf.testing.maps.MapIn.things)
  return things_.Add();
}
 void MapIn::add_things(const ::std::string& value) {
  things_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.protobuf.testing.maps.MapIn.things)
}
 void MapIn::add_things(const char* value) {
  things_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.protobuf.testing.maps.MapIn.things)
}
 void MapIn::add_things(const char* value, size_t size) {
  things_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.protobuf.testing.maps.MapIn.things)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapIn::things() const {
  // @@protoc_insertion_point(field_list:google.protobuf.testing.maps.MapIn.things)
  return things_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MapIn::mutable_things() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.testing.maps.MapIn.things)
  return &things_;
}

// map<string, string> map_input = 3;
int MapIn::map_input_size() const {
  return map_input_.size();
}
void MapIn::clear_map_input() {
  map_input_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
MapIn::map_input() const {
  // @@protoc_insertion_point(field_map:google.protobuf.testing.maps.MapIn.map_input)
  return map_input_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
MapIn::mutable_map_input() {
  // @@protoc_insertion_point(field_mutable_map:google.protobuf.testing.maps.MapIn.map_input)
  return map_input_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOut::kMap1FieldNumber;
const int MapOut::kMap2FieldNumber;
const int MapOut::kMap3FieldNumber;
const int MapOut::kMap4FieldNumber;
const int MapOut::kBarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOut::MapOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapOut)
}

void MapOut::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapOut::MapOut(const MapOut& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapOut)
}

void MapOut::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map1_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map1_.SetEntryDescriptor(
      &::google::protobuf::testing::maps::MapOut_Map1Entry_descriptor_);
  map2_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map2_.SetEntryDescriptor(
      &::google::protobuf::testing::maps::MapOut_Map2Entry_descriptor_);
  map3_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map3_.SetEntryDescriptor(
      &::google::protobuf::testing::maps::MapOut_Map3Entry_descriptor_);
  map4_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map4_.SetEntryDescriptor(
      &::google::protobuf::testing::maps::MapOut_Map4Entry_descriptor_);
  bar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MapOut::~MapOut() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapOut)
  SharedDtor();
}

void MapOut::SharedDtor() {
  bar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MapOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOut_descriptor_;
}

const MapOut& MapOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapOut* MapOut::default_instance_ = NULL;

MapOut* MapOut::New(::google::protobuf::Arena* arena) const {
  MapOut* n = new MapOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOut::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapOut)
  bar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map1_.Clear();
  map2_.Clear();
  map3_.Clear();
  map4_.Clear();
}

bool MapOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .google.protobuf.testing.maps.MapM> map1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map1:
          MapOut_Map1Entry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::testing::maps::MapM,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM > > parser(&map1_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOut.Map1Entry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_map1;
        if (input->ExpectTag(18)) goto parse_loop_map2;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .google.protobuf.testing.maps.MapOut> map2 = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map2:
          MapOut_Map2Entry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::testing::maps::MapOut,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut > > parser(&map2_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOut.Map2Entry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_map2;
        if (input->ExpectTag(26)) goto parse_loop_map3;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, string> map3 = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map3:
          MapOut_Map3Entry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&map3_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOut.Map3Entry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_map3;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_bar;
        break;
      }

      // optional string bar = 4;
      case 4: {
        if (tag == 34) {
         parse_bar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bar().data(), this->bar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOut.bar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map4;
        break;
      }

      // map<bool, string> map4 = 5;
      case 5: {
        if (tag == 42) {
         parse_map4:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map4:
          MapOut_Map4Entry::Parser< ::google::protobuf::internal::MapField<
              bool, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< bool, ::std::string > > parser(&map4_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOut.Map4Entry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_map4;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapOut)
  return false;
#undef DO_
}

void MapOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapOut)
  // map<string, .google.protobuf.testing.maps.MapM> map1 = 1;
  if (!this->map1().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map1Entry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map1().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map1().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map1Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map1_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map1Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it) {
        entry.reset(map1_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.protobuf.testing.maps.MapOut> map2 = 2;
  if (!this->map2().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map2Entry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map2().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map2().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map2Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map2_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map2Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it) {
        entry.reset(map2_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, string> map3 = 3;
  if (!this->map3().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map3Entry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map3().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map3().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map3Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map3_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map3Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it) {
        entry.reset(map3_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string bar = 4;
  if (this->bar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), this->bar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOut.bar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bar(), output);
  }

  // map<bool, string> map4 = 5;
  if (!this->map4().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map4Entry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->map4().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map4().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map4Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map4_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map4Entry> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it) {
        entry.reset(map4_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapOut)
}

::google::protobuf::uint8* MapOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapOut)
  // map<string, .google.protobuf.testing.maps.MapM> map1 = 1;
  if (!this->map1().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map1Entry.key");
      }
    };

    if (deterministic &&
        this->map1().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map1().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map1Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map1_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map1Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_iterator
          it = this->map1().begin();
          it != this->map1().end(); ++it) {
        entry.reset(map1_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.protobuf.testing.maps.MapOut> map2 = 2;
  if (!this->map2().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map2Entry.key");
      }
    };

    if (deterministic &&
        this->map2().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map2().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map2Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map2_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map2Entry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_iterator
          it = this->map2().begin();
          it != this->map2().end(); ++it) {
        entry.reset(map2_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, string> map3 = 3;
  if (!this->map3().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map3Entry.value");
      }
    };

    if (deterministic &&
        this->map3().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map3().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map3Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map3_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map3Entry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map3().begin();
          it != this->map3().end(); ++it) {
        entry.reset(map3_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string bar = 4;
  if (this->bar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), this->bar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOut.bar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bar(), target);
  }

  // map<bool, string> map4 = 5;
  if (!this->map4().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.protobuf.testing.maps.MapOut.Map4Entry.value");
      }
    };

    if (deterministic &&
        this->map4().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map4().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapOut_Map4Entry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map4_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapOut_Map4Entry> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->map4().begin();
          it != this->map4().end(); ++it) {
        entry.reset(map4_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapOut)
  return target;
}

int MapOut::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapOut)
  int total_size = 0;

  // optional string bar = 4;
  if (this->bar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bar());
  }

  // map<string, .google.protobuf.testing.maps.MapM> map1 = 1;
  total_size += 1 * this->map1_size();
  {
    ::google::protobuf::scoped_ptr<MapOut_Map1Entry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >::const_iterator
        it = this->map1().begin();
        it != this->map1().end(); ++it) {
      entry.reset(map1_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .google.protobuf.testing.maps.MapOut> map2 = 2;
  total_size += 1 * this->map2_size();
  {
    ::google::protobuf::scoped_ptr<MapOut_Map2Entry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >::const_iterator
        it = this->map2().begin();
        it != this->map2().end(); ++it) {
      entry.reset(map2_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, string> map3 = 3;
  total_size += 1 * this->map3_size();
  {
    ::google::protobuf::scoped_ptr<MapOut_Map3Entry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->map3().begin();
        it != this->map3().end(); ++it) {
      entry.reset(map3_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<bool, string> map4 = 5;
  total_size += 1 * this->map4_size();
  {
    ::google::protobuf::scoped_ptr<MapOut_Map4Entry> entry;
    for (::google::protobuf::Map< bool, ::std::string >::const_iterator
        it = this->map4().begin();
        it != this->map4().end(); ++it) {
      entry.reset(map4_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapOut)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOut* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapOut)
    MergeFrom(*source);
  }
}

void MapOut::MergeFrom(const MapOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapOut)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  if (from.bar().size() > 0) {

    bar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bar_);
  }
}

void MapOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOut::CopyFrom(const MapOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOut::IsInitialized() const {

  return true;
}

void MapOut::Swap(MapOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOut::InternalSwap(MapOut* other) {
  map1_.Swap(&other->map1_);
  map2_.Swap(&other->map2_);
  map3_.Swap(&other->map3_);
  map4_.Swap(&other->map4_);
  bar_.Swap(&other->bar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOut_descriptor_;
  metadata.reflection = MapOut_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapOut

// map<string, .google.protobuf.testing.maps.MapM> map1 = 1;
int MapOut::map1_size() const {
  return map1_.size();
}
void MapOut::clear_map1() {
  map1_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >&
MapOut::map1() const {
  // @@protoc_insertion_point(field_map:google.protobuf.testing.maps.MapOut.map1)
  return map1_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapM >*
MapOut::mutable_map1() {
  // @@protoc_insertion_point(field_mutable_map:google.protobuf.testing.maps.MapOut.map1)
  return map1_.MutableMap();
}

// map<string, .google.protobuf.testing.maps.MapOut> map2 = 2;
int MapOut::map2_size() const {
  return map2_.size();
}
void MapOut::clear_map2() {
  map2_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >&
MapOut::map2() const {
  // @@protoc_insertion_point(field_map:google.protobuf.testing.maps.MapOut.map2)
  return map2_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::testing::maps::MapOut >*
MapOut::mutable_map2() {
  // @@protoc_insertion_point(field_mutable_map:google.protobuf.testing.maps.MapOut.map2)
  return map2_.MutableMap();
}

// map<int32, string> map3 = 3;
int MapOut::map3_size() const {
  return map3_.size();
}
void MapOut::clear_map3() {
  map3_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
MapOut::map3() const {
  // @@protoc_insertion_point(field_map:google.protobuf.testing.maps.MapOut.map3)
  return map3_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
MapOut::mutable_map3() {
  // @@protoc_insertion_point(field_mutable_map:google.protobuf.testing.maps.MapOut.map3)
  return map3_.MutableMap();
}

// map<bool, string> map4 = 5;
int MapOut::map4_size() const {
  return map4_.size();
}
void MapOut::clear_map4() {
  map4_.Clear();
}
 const ::google::protobuf::Map< bool, ::std::string >&
MapOut::map4() const {
  // @@protoc_insertion_point(field_map:google.protobuf.testing.maps.MapOut.map4)
  return map4_.GetMap();
}
 ::google::protobuf::Map< bool, ::std::string >*
MapOut::mutable_map4() {
  // @@protoc_insertion_point(field_mutable_map:google.protobuf.testing.maps.MapOut.map4)
  return map4_.MutableMap();
}

// optional string bar = 4;
void MapOut::clear_bar() {
  bar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapOut::bar() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOut.bar)
  return bar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOut::set_bar(const ::std::string& value) {
  
  bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOut.bar)
}
 void MapOut::set_bar(const char* value) {
  
  bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapOut.bar)
}
 void MapOut::set_bar(const char* value, size_t size) {
  
  bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapOut.bar)
}
 ::std::string* MapOut::mutable_bar() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOut.bar)
  return bar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapOut::release_bar() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOut.bar)
  
  return bar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOut::set_allocated_bar(::std::string* bar) {
  if (bar != NULL) {
    
  } else {
    
  }
  bar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bar);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOut.bar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutWireFormat_Map1Entry::kKeyFieldNumber;
const int MapOutWireFormat_Map1Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
}

void MapOutWireFormat_Map1Entry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::google::protobuf::testing::maps::MapM*>(&::google::protobuf::testing::maps::MapM::default_instance());
}

MapOutWireFormat_Map1Entry::MapOutWireFormat_Map1Entry(const MapOutWireFormat_Map1Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
}

void MapOutWireFormat_Map1Entry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

MapOutWireFormat_Map1Entry::~MapOutWireFormat_Map1Entry() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  SharedDtor();
}

void MapOutWireFormat_Map1Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void MapOutWireFormat_Map1Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOutWireFormat_Map1Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOutWireFormat_Map1Entry_descriptor_;
}

const MapOutWireFormat_Map1Entry& MapOutWireFormat_Map1Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapOutWireFormat_Map1Entry* MapOutWireFormat_Map1Entry::default_instance_ = NULL;

MapOutWireFormat_Map1Entry* MapOutWireFormat_Map1Entry::New(::google::protobuf::Arena* arena) const {
  MapOutWireFormat_Map1Entry* n = new MapOutWireFormat_Map1Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOutWireFormat_Map1Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool MapOutWireFormat_Map1Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .google.protobuf.testing.maps.MapM value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  return false;
#undef DO_
}

void MapOutWireFormat_Map1Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .google.protobuf.testing.maps.MapM value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
}

::google::protobuf::uint8* MapOutWireFormat_Map1Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .google.protobuf.testing.maps.MapM value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  return target;
}

int MapOutWireFormat_Map1Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional .google.protobuf.testing.maps.MapM value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOutWireFormat_Map1Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOutWireFormat_Map1Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutWireFormat_Map1Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map1Entry::MergeFrom(const MapOutWireFormat_Map1Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::google::protobuf::testing::maps::MapM::MergeFrom(from.value());
  }
}

void MapOutWireFormat_Map1Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map1Entry::CopyFrom(const MapOutWireFormat_Map1Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map1Entry::IsInitialized() const {

  return true;
}

void MapOutWireFormat_Map1Entry::Swap(MapOutWireFormat_Map1Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutWireFormat_Map1Entry::InternalSwap(MapOutWireFormat_Map1Entry* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOutWireFormat_Map1Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOutWireFormat_Map1Entry_descriptor_;
  metadata.reflection = MapOutWireFormat_Map1Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutWireFormat_Map2Entry::kKeyFieldNumber;
const int MapOutWireFormat_Map2Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
}

void MapOutWireFormat_Map2Entry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::google::protobuf::testing::maps::MapOut*>(&::google::protobuf::testing::maps::MapOut::default_instance());
}

MapOutWireFormat_Map2Entry::MapOutWireFormat_Map2Entry(const MapOutWireFormat_Map2Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
}

void MapOutWireFormat_Map2Entry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
}

MapOutWireFormat_Map2Entry::~MapOutWireFormat_Map2Entry() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  SharedDtor();
}

void MapOutWireFormat_Map2Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void MapOutWireFormat_Map2Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOutWireFormat_Map2Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOutWireFormat_Map2Entry_descriptor_;
}

const MapOutWireFormat_Map2Entry& MapOutWireFormat_Map2Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapOutWireFormat_Map2Entry* MapOutWireFormat_Map2Entry::default_instance_ = NULL;

MapOutWireFormat_Map2Entry* MapOutWireFormat_Map2Entry::New(::google::protobuf::Arena* arena) const {
  MapOutWireFormat_Map2Entry* n = new MapOutWireFormat_Map2Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOutWireFormat_Map2Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool MapOutWireFormat_Map2Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .google.protobuf.testing.maps.MapOut value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  return false;
#undef DO_
}

void MapOutWireFormat_Map2Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .google.protobuf.testing.maps.MapOut value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
}

::google::protobuf::uint8* MapOutWireFormat_Map2Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .google.protobuf.testing.maps.MapOut value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  return target;
}

int MapOutWireFormat_Map2Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional .google.protobuf.testing.maps.MapOut value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOutWireFormat_Map2Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOutWireFormat_Map2Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutWireFormat_Map2Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map2Entry::MergeFrom(const MapOutWireFormat_Map2Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::google::protobuf::testing::maps::MapOut::MergeFrom(from.value());
  }
}

void MapOutWireFormat_Map2Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map2Entry::CopyFrom(const MapOutWireFormat_Map2Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map2Entry::IsInitialized() const {

  return true;
}

void MapOutWireFormat_Map2Entry::Swap(MapOutWireFormat_Map2Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutWireFormat_Map2Entry::InternalSwap(MapOutWireFormat_Map2Entry* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOutWireFormat_Map2Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOutWireFormat_Map2Entry_descriptor_;
  metadata.reflection = MapOutWireFormat_Map2Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutWireFormat_Map3Entry::kKeyFieldNumber;
const int MapOutWireFormat_Map3Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
}

void MapOutWireFormat_Map3Entry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapOutWireFormat_Map3Entry::MapOutWireFormat_Map3Entry(const MapOutWireFormat_Map3Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
}

void MapOutWireFormat_Map3Entry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MapOutWireFormat_Map3Entry::~MapOutWireFormat_Map3Entry() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  SharedDtor();
}

void MapOutWireFormat_Map3Entry::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MapOutWireFormat_Map3Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOutWireFormat_Map3Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOutWireFormat_Map3Entry_descriptor_;
}

const MapOutWireFormat_Map3Entry& MapOutWireFormat_Map3Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapOutWireFormat_Map3Entry* MapOutWireFormat_Map3Entry::default_instance_ = NULL;

MapOutWireFormat_Map3Entry* MapOutWireFormat_Map3Entry::New(::google::protobuf::Arena* arena) const {
  MapOutWireFormat_Map3Entry* n = new MapOutWireFormat_Map3Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOutWireFormat_Map3Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  key_ = 0;
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MapOutWireFormat_Map3Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  return false;
#undef DO_
}

void MapOutWireFormat_Map3Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  // optional int32 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
}

::google::protobuf::uint8* MapOutWireFormat_Map3Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  // optional int32 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  return target;
}

int MapOutWireFormat_Map3Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  int total_size = 0;

  // optional int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOutWireFormat_Map3Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOutWireFormat_Map3Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutWireFormat_Map3Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map3Entry::MergeFrom(const MapOutWireFormat_Map3Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MapOutWireFormat_Map3Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map3Entry::CopyFrom(const MapOutWireFormat_Map3Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map3Entry::IsInitialized() const {

  return true;
}

void MapOutWireFormat_Map3Entry::Swap(MapOutWireFormat_Map3Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutWireFormat_Map3Entry::InternalSwap(MapOutWireFormat_Map3Entry* other) {
  std::swap(key_, other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOutWireFormat_Map3Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOutWireFormat_Map3Entry_descriptor_;
  metadata.reflection = MapOutWireFormat_Map3Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutWireFormat_Map4Entry::kKeyFieldNumber;
const int MapOutWireFormat_Map4Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
}

void MapOutWireFormat_Map4Entry::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapOutWireFormat_Map4Entry::MapOutWireFormat_Map4Entry(const MapOutWireFormat_Map4Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
}

void MapOutWireFormat_Map4Entry::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = false;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MapOutWireFormat_Map4Entry::~MapOutWireFormat_Map4Entry() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  SharedDtor();
}

void MapOutWireFormat_Map4Entry::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MapOutWireFormat_Map4Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOutWireFormat_Map4Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOutWireFormat_Map4Entry_descriptor_;
}

const MapOutWireFormat_Map4Entry& MapOutWireFormat_Map4Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapOutWireFormat_Map4Entry* MapOutWireFormat_Map4Entry::default_instance_ = NULL;

MapOutWireFormat_Map4Entry* MapOutWireFormat_Map4Entry::New(::google::protobuf::Arena* arena) const {
  MapOutWireFormat_Map4Entry* n = new MapOutWireFormat_Map4Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOutWireFormat_Map4Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  key_ = false;
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MapOutWireFormat_Map4Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  return false;
#undef DO_
}

void MapOutWireFormat_Map4Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  // optional bool key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
}

::google::protobuf::uint8* MapOutWireFormat_Map4Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  // optional bool key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  return target;
}

int MapOutWireFormat_Map4Entry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  int total_size = 0;

  // optional bool key = 1;
  if (this->key() != 0) {
    total_size += 1 + 1;
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOutWireFormat_Map4Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOutWireFormat_Map4Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutWireFormat_Map4Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
    MergeFrom(*source);
  }
}

void MapOutWireFormat_Map4Entry::MergeFrom(const MapOutWireFormat_Map4Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MapOutWireFormat_Map4Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat_Map4Entry::CopyFrom(const MapOutWireFormat_Map4Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat_Map4Entry::IsInitialized() const {

  return true;
}

void MapOutWireFormat_Map4Entry::Swap(MapOutWireFormat_Map4Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutWireFormat_Map4Entry::InternalSwap(MapOutWireFormat_Map4Entry* other) {
  std::swap(key_, other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOutWireFormat_Map4Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOutWireFormat_Map4Entry_descriptor_;
  metadata.reflection = MapOutWireFormat_Map4Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapOutWireFormat::kMap1FieldNumber;
const int MapOutWireFormat::kMap2FieldNumber;
const int MapOutWireFormat::kMap3FieldNumber;
const int MapOutWireFormat::kMap4FieldNumber;
const int MapOutWireFormat::kBarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapOutWireFormat::MapOutWireFormat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapOutWireFormat)
}

void MapOutWireFormat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapOutWireFormat::MapOutWireFormat(const MapOutWireFormat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapOutWireFormat)
}

void MapOutWireFormat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MapOutWireFormat::~MapOutWireFormat() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapOutWireFormat)
  SharedDtor();
}

void MapOutWireFormat::SharedDtor() {
  bar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MapOutWireFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOutWireFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOutWireFormat_descriptor_;
}

const MapOutWireFormat& MapOutWireFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapOutWireFormat* MapOutWireFormat::default_instance_ = NULL;

MapOutWireFormat* MapOutWireFormat::New(::google::protobuf::Arena* arena) const {
  MapOutWireFormat* n = new MapOutWireFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapOutWireFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapOutWireFormat)
  bar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map1_.Clear();
  map2_.Clear();
  map3_.Clear();
  map4_.Clear();
}

bool MapOutWireFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapOutWireFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map1Entry map1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_map1;
        if (input->ExpectTag(18)) goto parse_loop_map2;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map2Entry map2 = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_map2;
        if (input->ExpectTag(26)) goto parse_loop_map3;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map3Entry map3 = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_map3;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_bar;
        break;
      }

      // optional string bar = 4;
      case 4: {
        if (tag == 34) {
         parse_bar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bar().data(), this->bar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapOutWireFormat.bar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map4;
        break;
      }

      // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map4Entry map4 = 5;
      case 5: {
        if (tag == 42) {
         parse_map4:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_map4;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapOutWireFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapOutWireFormat)
  return false;
#undef DO_
}

void MapOutWireFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapOutWireFormat)
  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map1Entry map1 = 1;
  for (unsigned int i = 0, n = this->map1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map1(i), output);
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map2Entry map2 = 2;
  for (unsigned int i = 0, n = this->map2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map2(i), output);
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map3Entry map3 = 3;
  for (unsigned int i = 0, n = this->map3_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map3(i), output);
  }

  // optional string bar = 4;
  if (this->bar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), this->bar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.bar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bar(), output);
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map4Entry map4 = 5;
  for (unsigned int i = 0, n = this->map4_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->map4(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapOutWireFormat)
}

::google::protobuf::uint8* MapOutWireFormat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapOutWireFormat)
  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map1Entry map1 = 1;
  for (unsigned int i = 0, n = this->map1_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->map1(i), false, target);
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map2Entry map2 = 2;
  for (unsigned int i = 0, n = this->map2_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->map2(i), false, target);
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map3Entry map3 = 3;
  for (unsigned int i = 0, n = this->map3_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->map3(i), false, target);
  }

  // optional string bar = 4;
  if (this->bar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bar().data(), this->bar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapOutWireFormat.bar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bar(), target);
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map4Entry map4 = 5;
  for (unsigned int i = 0, n = this->map4_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->map4(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapOutWireFormat)
  return target;
}

int MapOutWireFormat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapOutWireFormat)
  int total_size = 0;

  // optional string bar = 4;
  if (this->bar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bar());
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map1Entry map1 = 1;
  total_size += 1 * this->map1_size();
  for (int i = 0; i < this->map1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map1(i));
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map2Entry map2 = 2;
  total_size += 1 * this->map2_size();
  for (int i = 0; i < this->map2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map2(i));
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map3Entry map3 = 3;
  total_size += 1 * this->map3_size();
  for (int i = 0; i < this->map3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map3(i));
  }

  // repeated .google.protobuf.testing.maps.MapOutWireFormat.Map4Entry map4 = 5;
  total_size += 1 * this->map4_size();
  for (int i = 0; i < this->map4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map4(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOutWireFormat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapOutWireFormat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapOutWireFormat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapOutWireFormat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapOutWireFormat)
    MergeFrom(*source);
  }
}

void MapOutWireFormat::MergeFrom(const MapOutWireFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapOutWireFormat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  map3_.MergeFrom(from.map3_);
  map4_.MergeFrom(from.map4_);
  if (from.bar().size() > 0) {

    bar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bar_);
  }
}

void MapOutWireFormat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOutWireFormat::CopyFrom(const MapOutWireFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapOutWireFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOutWireFormat::IsInitialized() const {

  return true;
}

void MapOutWireFormat::Swap(MapOutWireFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapOutWireFormat::InternalSwap(MapOutWireFormat* other) {
  map1_.UnsafeArenaSwap(&other->map1_);
  map2_.UnsafeArenaSwap(&other->map2_);
  map3_.UnsafeArenaSwap(&other->map3_);
  map4_.UnsafeArenaSwap(&other->map4_);
  bar_.Swap(&other->bar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapOutWireFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOutWireFormat_descriptor_;
  metadata.reflection = MapOutWireFormat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapOutWireFormat_Map1Entry

// optional string key = 1;
void MapOutWireFormat_Map1Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapOutWireFormat_Map1Entry::key() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map1Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
}
 void MapOutWireFormat_Map1Entry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
}
 void MapOutWireFormat_Map1Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
}
 ::std::string* MapOutWireFormat_Map1Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapOutWireFormat_Map1Entry::release_key() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map1Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.key)
}

// optional .google.protobuf.testing.maps.MapM value = 2;
bool MapOutWireFormat_Map1Entry::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void MapOutWireFormat_Map1Entry::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::google::protobuf::testing::maps::MapM& MapOutWireFormat_Map1Entry::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::google::protobuf::testing::maps::MapM* MapOutWireFormat_Map1Entry::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::testing::maps::MapM;
  }
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.value)
  return value_;
}
::google::protobuf::testing::maps::MapM* MapOutWireFormat_Map1Entry::release_value() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.value)
  
  ::google::protobuf::testing::maps::MapM* temp = value_;
  value_ = NULL;
  return temp;
}
void MapOutWireFormat_Map1Entry::set_allocated_value(::google::protobuf::testing::maps::MapM* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.Map1Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map2Entry

// optional string key = 1;
void MapOutWireFormat_Map2Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapOutWireFormat_Map2Entry::key() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map2Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
}
 void MapOutWireFormat_Map2Entry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
}
 void MapOutWireFormat_Map2Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
}
 ::std::string* MapOutWireFormat_Map2Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapOutWireFormat_Map2Entry::release_key() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map2Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.key)
}

// optional .google.protobuf.testing.maps.MapOut value = 2;
bool MapOutWireFormat_Map2Entry::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void MapOutWireFormat_Map2Entry::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::google::protobuf::testing::maps::MapOut& MapOutWireFormat_Map2Entry::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::google::protobuf::testing::maps::MapOut* MapOutWireFormat_Map2Entry::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::testing::maps::MapOut;
  }
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.value)
  return value_;
}
::google::protobuf::testing::maps::MapOut* MapOutWireFormat_Map2Entry::release_value() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.value)
  
  ::google::protobuf::testing::maps::MapOut* temp = value_;
  value_ = NULL;
  return temp;
}
void MapOutWireFormat_Map2Entry::set_allocated_value(::google::protobuf::testing::maps::MapOut* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.Map2Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map3Entry

// optional int32 key = 1;
void MapOutWireFormat_Map3Entry::clear_key() {
  key_ = 0;
}
 ::google::protobuf::int32 MapOutWireFormat_Map3Entry::key() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.key)
  return key_;
}
 void MapOutWireFormat_Map3Entry::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.key)
}

// optional string value = 2;
void MapOutWireFormat_Map3Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapOutWireFormat_Map3Entry::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map3Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
}
 void MapOutWireFormat_Map3Entry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
}
 void MapOutWireFormat_Map3Entry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
}
 ::std::string* MapOutWireFormat_Map3Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapOutWireFormat_Map3Entry::release_value() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map3Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.Map3Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat_Map4Entry

// optional bool key = 1;
void MapOutWireFormat_Map4Entry::clear_key() {
  key_ = false;
}
 bool MapOutWireFormat_Map4Entry::key() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.key)
  return key_;
}
 void MapOutWireFormat_Map4Entry::set_key(bool value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.key)
}

// optional string value = 2;
void MapOutWireFormat_Map4Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapOutWireFormat_Map4Entry::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map4Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
}
 void MapOutWireFormat_Map4Entry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
}
 void MapOutWireFormat_Map4Entry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
}
 ::std::string* MapOutWireFormat_Map4Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapOutWireFormat_Map4Entry::release_value() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat_Map4Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.Map4Entry.value)
}

// -------------------------------------------------------------------

// MapOutWireFormat

// repeated .google.protobuf.testing.maps.MapOutWireFormat.Map1Entry map1 = 1;
int MapOutWireFormat::map1_size() const {
  return map1_.size();
}
void MapOutWireFormat::clear_map1() {
  map1_.Clear();
}
const ::google::protobuf::testing::maps::MapOutWireFormat_Map1Entry& MapOutWireFormat::map1(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.map1)
  return map1_.Get(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map1Entry* MapOutWireFormat::mutable_map1(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.map1)
  return map1_.Mutable(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map1Entry* MapOutWireFormat::add_map1() {
  // @@protoc_insertion_point(field_add:google.protobuf.testing.maps.MapOutWireFormat.map1)
  return map1_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map1Entry >*
MapOutWireFormat::mutable_map1() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.testing.maps.MapOutWireFormat.map1)
  return &map1_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map1Entry >&
MapOutWireFormat::map1() const {
  // @@protoc_insertion_point(field_list:google.protobuf.testing.maps.MapOutWireFormat.map1)
  return map1_;
}

// repeated .google.protobuf.testing.maps.MapOutWireFormat.Map2Entry map2 = 2;
int MapOutWireFormat::map2_size() const {
  return map2_.size();
}
void MapOutWireFormat::clear_map2() {
  map2_.Clear();
}
const ::google::protobuf::testing::maps::MapOutWireFormat_Map2Entry& MapOutWireFormat::map2(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.map2)
  return map2_.Get(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map2Entry* MapOutWireFormat::mutable_map2(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.map2)
  return map2_.Mutable(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map2Entry* MapOutWireFormat::add_map2() {
  // @@protoc_insertion_point(field_add:google.protobuf.testing.maps.MapOutWireFormat.map2)
  return map2_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map2Entry >*
MapOutWireFormat::mutable_map2() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.testing.maps.MapOutWireFormat.map2)
  return &map2_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map2Entry >&
MapOutWireFormat::map2() const {
  // @@protoc_insertion_point(field_list:google.protobuf.testing.maps.MapOutWireFormat.map2)
  return map2_;
}

// repeated .google.protobuf.testing.maps.MapOutWireFormat.Map3Entry map3 = 3;
int MapOutWireFormat::map3_size() const {
  return map3_.size();
}
void MapOutWireFormat::clear_map3() {
  map3_.Clear();
}
const ::google::protobuf::testing::maps::MapOutWireFormat_Map3Entry& MapOutWireFormat::map3(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.map3)
  return map3_.Get(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map3Entry* MapOutWireFormat::mutable_map3(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.map3)
  return map3_.Mutable(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map3Entry* MapOutWireFormat::add_map3() {
  // @@protoc_insertion_point(field_add:google.protobuf.testing.maps.MapOutWireFormat.map3)
  return map3_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map3Entry >*
MapOutWireFormat::mutable_map3() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.testing.maps.MapOutWireFormat.map3)
  return &map3_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map3Entry >&
MapOutWireFormat::map3() const {
  // @@protoc_insertion_point(field_list:google.protobuf.testing.maps.MapOutWireFormat.map3)
  return map3_;
}

// repeated .google.protobuf.testing.maps.MapOutWireFormat.Map4Entry map4 = 5;
int MapOutWireFormat::map4_size() const {
  return map4_.size();
}
void MapOutWireFormat::clear_map4() {
  map4_.Clear();
}
const ::google::protobuf::testing::maps::MapOutWireFormat_Map4Entry& MapOutWireFormat::map4(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.map4)
  return map4_.Get(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map4Entry* MapOutWireFormat::mutable_map4(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.map4)
  return map4_.Mutable(index);
}
::google::protobuf::testing::maps::MapOutWireFormat_Map4Entry* MapOutWireFormat::add_map4() {
  // @@protoc_insertion_point(field_add:google.protobuf.testing.maps.MapOutWireFormat.map4)
  return map4_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map4Entry >*
MapOutWireFormat::mutable_map4() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.testing.maps.MapOutWireFormat.map4)
  return &map4_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::testing::maps::MapOutWireFormat_Map4Entry >&
MapOutWireFormat::map4() const {
  // @@protoc_insertion_point(field_list:google.protobuf.testing.maps.MapOutWireFormat.map4)
  return map4_;
}

// optional string bar = 4;
void MapOutWireFormat::clear_bar() {
  bar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapOutWireFormat::bar() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapOutWireFormat.bar)
  return bar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat::set_bar(const ::std::string& value) {
  
  bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapOutWireFormat.bar)
}
 void MapOutWireFormat::set_bar(const char* value) {
  
  bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapOutWireFormat.bar)
}
 void MapOutWireFormat::set_bar(const char* value, size_t size) {
  
  bar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapOutWireFormat.bar)
}
 ::std::string* MapOutWireFormat::mutable_bar() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapOutWireFormat.bar)
  return bar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapOutWireFormat::release_bar() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapOutWireFormat.bar)
  
  return bar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapOutWireFormat::set_allocated_bar(::std::string* bar) {
  if (bar != NULL) {
    
  } else {
    
  }
  bar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bar);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapOutWireFormat.bar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapM::kFooFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapM::MapM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.testing.maps.MapM)
}

void MapM::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MapM::MapM(const MapM& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:google.protobuf.testing.maps.MapM)
}

void MapM::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  foo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MapM::~MapM() {
  // @@protoc_insertion_point(destructor:google.protobuf.testing.maps.MapM)
  SharedDtor();
}

void MapM::SharedDtor() {
  foo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MapM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapM_descriptor_;
}

const MapM& MapM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2futil_2finternal_2ftestdata_2fmaps_2eproto();
  return *default_instance_;
}

MapM* MapM::default_instance_ = NULL;

MapM* MapM::New(::google::protobuf::Arena* arena) const {
  MapM* n = new MapM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapM::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.testing.maps.MapM)
  foo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MapM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.testing.maps.MapM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string foo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->foo().data(), this->foo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.testing.maps.MapM.foo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.testing.maps.MapM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.testing.maps.MapM)
  return false;
#undef DO_
}

void MapM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.testing.maps.MapM)
  // optional string foo = 1;
  if (this->foo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->foo().data(), this->foo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapM.foo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->foo(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.testing.maps.MapM)
}

::google::protobuf::uint8* MapM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.testing.maps.MapM)
  // optional string foo = 1;
  if (this->foo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->foo().data(), this->foo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.testing.maps.MapM.foo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->foo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.testing.maps.MapM)
  return target;
}

int MapM::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.testing.maps.MapM)
  int total_size = 0;

  // optional string foo = 1;
  if (this->foo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->foo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.protobuf.testing.maps.MapM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapM* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.protobuf.testing.maps.MapM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.protobuf.testing.maps.MapM)
    MergeFrom(*source);
  }
}

void MapM::MergeFrom(const MapM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.testing.maps.MapM)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.foo().size() > 0) {

    foo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.foo_);
  }
}

void MapM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.protobuf.testing.maps.MapM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapM::CopyFrom(const MapM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.testing.maps.MapM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapM::IsInitialized() const {

  return true;
}

void MapM::Swap(MapM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapM::InternalSwap(MapM* other) {
  foo_.Swap(&other->foo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapM_descriptor_;
  metadata.reflection = MapM_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapM

// optional string foo = 1;
void MapM::clear_foo() {
  foo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MapM::foo() const {
  // @@protoc_insertion_point(field_get:google.protobuf.testing.maps.MapM.foo)
  return foo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapM::set_foo(const ::std::string& value) {
  
  foo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.testing.maps.MapM.foo)
}
 void MapM::set_foo(const char* value) {
  
  foo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.testing.maps.MapM.foo)
}
 void MapM::set_foo(const char* value, size_t size) {
  
  foo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.testing.maps.MapM.foo)
}
 ::std::string* MapM::mutable_foo() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.testing.maps.MapM.foo)
  return foo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MapM::release_foo() {
  // @@protoc_insertion_point(field_release:google.protobuf.testing.maps.MapM.foo)
  
  return foo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MapM::set_allocated_foo(::std::string* foo) {
  if (foo != NULL) {
    
  } else {
    
  }
  foo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), foo);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.testing.maps.MapM.foo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace maps
}  // namespace testing
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
